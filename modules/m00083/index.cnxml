<document xmlns="http://cnx.rice.edu/cnxml">
  <title>Instance methods</title>
  <metadata xmlns:md="http://cnx.rice.edu/mdml">
    <md:title>Instance methods</md:title>
    <md:content-id>m00083</md:content-id>
    <md:uuid>db4506d3-00fd-4e9e-a2ca-c6bad9bbe97e</md:uuid>
  </metadata>
<content>
  <section id="sect-00001">
  <title>Learning objectives</title>
  <para id="para-00001">By the end of this section you should be able to</para>
  <list id="list-00001">
  <item>Create and implement __init__() with multiple parameters including default parameter values</item>
  <item>Describe which information an instance method has access to and can modify</item>
  </list>
  </section>
  <section id="sect-00002">
  <title>More about __init__()</title>
  <para id="para-00002">In Python, __init__() is the special method that creates instances. <code class="python inline-code">__init__()</code> must have the calling instance, <code class="python inline-code">self</code>, as the first parameter and can have any number of other parameters with or without default parameter values.</para>
  <note class="guided-slides" id="note-00001">
  <title>Creating patient vital signs instances</title>
  <media alt="creating_instances_slides">
  <iframe width="660" height="371.4" src="https://www.openstax.org/r/creating-instances"/>
  </media>
  </note>
  <note class="learning-questions" id="note-00002">
  <title>Defining and using __init__() with parameters</title>
  <para id="para-00003">Consider the example above.</para>
  <exercise id="exer-00001">
  <problem id="prob-00001">
  <para id="para-00004"><link class="os-embed" url="#exercise/CPL-ch11-m03-p01"/></para>
  </problem>
  </exercise>
  <exercise id="exer-00002">
  <problem id="prob-00002">
  <para id="para-00005"><link class="os-embed" url="#exercise/CPL-ch11-m03-p02"/></para>
  </problem>
  </exercise>
  <exercise id="exer-00003">
  <problem id="prob-00003">
  <para id="para-00006"><link class="os-embed" url="#exercise/CPL-ch11-m03-p03"/></para>
  </problem>
  </exercise>
  </note>
  </section>
  <section id="sect-00003">
  <title>Instance methods</title>
  <para id="para-00007">An <term id="term-00001">instance method</term> is used to access and modify instance attributes as well as the class attributes. All methods shown so far and most methods defined in a class definition are instance methods.</para>
  <example id="exam-00001">
  <title>Instance methods are often used to get and set instance information</title>
  <code class="python" lang="python">
  class ProductionCar:
    def __init__(self, make, model, year, max_mph = 0.0):
      self.make = make
      self.model = model
      self.year = year
      self.max_mph = max_mph<newline/>
    def max_kmh(self):
      return self.max_mph * 1.609344<newline/>
    def update_max(self, speed):
      self.max_mph = speed<newline/>
  car_1 = ProductionCar('McLaren', 'Speedtail', 2020) # car_1.max_mph is 0.0
  car_1.update_max(250.0) # car_1.max_mph is 250.0
  print(car_1.make, car_1.model, 'reaches', car_1.max_mph, 'mph (',
    car_1.max_kmh(), 'km/h)') # Prints McLaren Speedtail reaches 250.0 mph (402.336 km/h)
  </code>
  </example>
  <note class="learning-questions" id="note-00003">
  <title>CoffeeOrder instance methods</title>
  <para id="para-00008">Consider the example below:</para>
  <code class="python" lang="python">
  class CoffeeOrder:
    loc = 'Cafe Coffee'
    cls_id = 1<newline/>
    def __init__(self, size=16, milk=False, sugar=False):
      self.order_id = CoffeeOrder.cls_id
      self.cup_size = size
      self.with_milk = milk
      self.with_sugar = sugar
      CoffeeOrder.cls_id += 1<newline/>
    def change(self, milk, sugar):
      self.with_milk = milk
      self.with_sugar = sugar<newline/>
    def print_order(self):
      print(CoffeeOrder.loc,'Order', self.order_id, ':', self.cup_size, 'oz')
      if self.with_milk:
        print('\twith milk')
      if self.with_sugar:
        print('\twith sugar')<newline/>
  order_1 = CoffeeOrder(8)
  order_2 = CoffeeOrder(8, True, False)
  order_1.change(False, True)
  </code>
  <exercise id="exer-00004">
  <problem id="prob-00004">
  <para id="para-00009"><link class="os-embed" url="#exercise/CPL-ch11-m03-p04"/></para>
  </problem>
  </exercise>
  <exercise id="exer-00005">
  <problem id="prob-00005">
  <para id="para-00010"><link class="os-embed" url="#exercise/CPL-ch11-m03-p05"/></para>
  </problem>
  </exercise>
  <exercise id="exer-00006">
  <problem id="prob-00006">
  <para id="para-00011"><link class="os-embed" url="#exercise/CPL-ch11-m03-p06"/></para>
  </problem>
  </exercise>
  </note>
  </section>
  
  <note class="practice-program" id="note-00004">
  <title>Creating a class for vending machines</title>
  <para id="para-00012">Write a class, VendingMachine, as described below. Default values follow the attributes. Ex: count's default value is 0. Create a vending machine using a value read from input and call instance methods.</para>
  <para id="para-00013">Instance attributes:</para>
  <list id="list-00002">
  <item>count: 0</item>
  <item>max: 0</item>
  </list>
  <para id="para-00014">Methods:</para>
  <list id="list-00003">
  <item>__init__(num): initializes count and max with num parameter </item>
  <item>refill(): assigns count with max's value and prints 'Refilled'</item>
  <item>sell(order): assigns count with the value of count minus order and prints 'Sold: [order]'</item>
  <item>print_stock(): prints 'Current stock: [count]'</item>
  </list>
  <para id="para-00015">Given input:</para>
  <code class="python" lang="python">
  100
  25
  </code>
  <para id="para-00016">The output is:</para>
  <code class="python" lang="python">
  Current stock: 100
  Sold: 25
  Current stock: 75
  Refilled
  Current stock: 100
  </code>
  <media alt="creating_a_class_for_vending_machines_program">
  <iframe width="660" height="371.4" src="../../media/interactive/coderunner/ch11/CodeRunner_11_04_03_Creating-a-class-for-vending-machines.html"/>
  </media>
  </note>
  </content>
</document>