<document xmlns="http://cnx.rice.edu/cnxml">
  <title>Variables</title>
  <metadata xmlns:md="http://cnx.rice.edu/mdml">
    <md:title>Variables</md:title>
    <md:content-id>m00004</md:content-id>
    <md:uuid>b420edbd-6d6c-4928-a0f0-9b7c99c3a542</md:uuid>
  </metadata>
  <content>
<section id="sect-00001">
<title>Learning objectives</title>
<para id="para-00015">By the end of this section you should be able to</para>
<list id="list-00001">
<item>Assign variables and print variables.</item>
<item>Explain rules for naming variables.</item>
</list>
</section>
<section id="sect-00002">
<title>Assignment statement</title>
<para id="para-00001">Variables allow programs to refer to values using names rather than memory locations. Ex: <code class="python inline-code" lang="python">age</code> refers to a person's age, and <code class="python inline-code" lang="python">birth</code> refers to a person's birthday.</para>
<para id="para-00002">A statement can set a variable to a value using the <term id="term-00003">assignment operator</term> (<term id="term-00006">=</term>). Note that this is different from the equal sign of mathematics. Ex: <code class="python inline-code" lang="python">age = 6</code> or <code class="python inline-code" lang="python">birth = "May 15"</code>. The left side of the assignment statement is a variable, and the right side is the value with which the variable is assigned. </para>
<note class="guided-slides" id="note-00001">
<title>Assigning and using variables</title>
<media alt="using_variables_slides">
<iframe width="660" height="371.4" src="https://www.openstax.org/r/using-variables"/>
</media>
</note>
<note class="learning-questions" id="note-00002">
<title>Assigning and using variables</title>
<exercise id="exer-00001">
<problem id="prob-00001">
<para id="para-00003"><link class="os-embed" url="#exercise/CPL-ch01-m03-p01"/></para>
</problem>
</exercise>
<exercise id="exer-00002">
<problem id="prob-00002">
<para id="para-00004"><link class="os-embed" url="#exercise/CPL-ch01-m03-p02"/></para>
</problem>
</exercise>
<exercise id="exer-00003">
<problem id="prob-00003">
<para id="para-00005"><link class="os-embed" url="#exercise/CPL-ch01-m03-p03"/></para>
</problem>
</exercise>
<exercise id="exer-00004">
<problem id="prob-00004">
<para id="para-00006"><link class="os-embed" url="#exercise/CPL-ch01-m03-p04"/></para>
</problem>
</exercise>
</note>
</section>
<section id="sect-00003">
<title>Variable naming rules</title>
<para id="para-00007">A variable name can consist of letters, digits, and underscores and be of any length. The name cannot start with a digit. Ex: <code class="python inline-code" lang="python">101class</code> is invalid. Also letter case matters. Ex: <code class="python inline-code" lang="python">Total</code> is different from <code class="python inline-code" lang="python">total</code>. Python's style guide recommends writing variable names in <term id="term-00004">snake case</term>, which is all lowercase with underscores in between each word, such as <code class="python inline-code" lang="python">first_name</code> or <code class="python inline-code" lang="python">total_price</code>.</para>
<para id="para-00008">A name should be short and descriptive, so words are preferred over single characters in programs for readability. Ex: A variable named <code class="python inline-code" lang="python">count</code> indicates the variable's purpose better than a variable named <code class="python inline-code" lang="python">c</code>.</para>
<para id="para-00009">Python has reserved words, known as <term id="term-00005">keywords</term>, that have special functions and cannot be used as names for variables (or other objects).</para>
<table summary=" " id="table-00001">
<title>Keywords</title>
<tgroup cols="5">
  <tbody>
    <row>
    <entry><code class="python inline-code" lang="python">False</code></entry>
    <entry><code class="python inline-code" lang="python">await</code></entry>
    <entry><code class="python inline-code" lang="python">else</code></entry>
    <entry><code class="python inline-code" lang="python">import</code></entry>
    <entry><code class="python inline-code" lang="python">pass</code></entry>
    </row>
    <row>
    <entry><code class="python inline-code" lang="python">None</code></entry>
    <entry><code class="python inline-code" lang="python">break</code></entry>
    <entry><code class="python inline-code" lang="python">except</code></entry>
    <entry><code class="python inline-code" lang="python">in</code></entry>
    <entry><code class="python inline-code" lang="python">raise</code></entry>
    </row>
    <row>
    <entry><code class="python inline-code" lang="python">True</code></entry>
    <entry><code class="python inline-code" lang="python">class</code></entry>
    <entry><code class="python inline-code" lang="python">finally</code></entry>
    <entry><code class="python inline-code" lang="python">is</code></entry>
    <entry><code class="python inline-code" lang="python">return</code></entry>
    </row>
    <row>
    <entry><code class="python inline-code" lang="python">and</code></entry>
    <entry><code class="python inline-code" lang="python">continue</code></entry>
    <entry><code class="python inline-code" lang="python">for</code></entry>
    <entry><code class="python inline-code" lang="python">lambda</code></entry>
    <entry><code class="python inline-code" lang="python">try</code></entry>
    </row>
    <row>
    <entry><code class="python inline-code" lang="python">as</code></entry>
    <entry><code class="python inline-code" lang="python">def</code></entry>
    <entry><code class="python inline-code" lang="python">from</code></entry>
    <entry><code class="python inline-code" lang="python">nonlocal</code></entry>
    <entry><code class="python inline-code" lang="python">while</code></entry>
    </row>
    <row>
    <entry><code class="python inline-code" lang="python">assert</code></entry>
    <entry><code class="python inline-code" lang="python">del</code></entry>
    <entry><code class="python inline-code" lang="python">global</code></entry>
    <entry><code class="python inline-code" lang="python">not</code></entry>
    <entry><code class="python inline-code" lang="python">with</code></entry>
    </row>
    <row>
    <entry><code class="python inline-code" lang="python">asynch</code></entry>
    <entry><code class="python inline-code" lang="python">elif</code></entry>
    <entry><code class="python inline-code" lang="python">if</code></entry>
    <entry><code class="python inline-code" lang="python">or</code></entry>
    <entry><code class="python inline-code" lang="python">yield</code></entry>
    </row>
    </tbody>
</tgroup>
<caption/>
</table>
<note class="learning-questions" id="note-00003">
<title>Valid variable names</title>
<exercise id="exer-00005">
<problem id="prob-00005">
<para id="para-00010"><link class="os-embed" url="#exercise/CPL-ch01-m03-p05"/></para>
</problem>
</exercise>
<exercise id="exer-00006">
<problem id="prob-00006">
<para id="para-00011"><link class="os-embed" url="#exercise/CPL-ch01-m03-p06"/></para>
</problem>
</exercise>
<exercise id="exer-00007">
<problem id="prob-00007">
<para id="para-00012"><link class="os-embed" url="#exercise/CPL-ch01-m03-p07"/></para>
</problem>
</exercise>
<exercise id="exer-00008">
<problem id="prob-00008">
<para id="para-00013"><link class="os-embed" url="#exercise/CPL-ch01-m03-p08"/></para>
</problem>
</exercise>
</note>
</section>

<note class="practice-program" id="note-00004">
<title>Final score</title>
<para id="para-00014">Write a Python computer program that
<list id="list-00002">
<item>creates a variable, <code class="python inline-code" lang="python">team1</code>, assigned with the value, <code class="python inline-code" lang="python">"Liverpool"</code></item>
<item>creates a variable, <code class="python inline-code" lang="python">team2</code>, assigned with the value, <code class="python inline-code" lang="python">"Chelsea"</code></item>
<item>creates a variable, <code class="python inline-code" lang="python">score1</code>, assigned with the value, <code class="python inline-code" lang="python">4</code></item>
<item>creates a variable, <code class="python inline-code" lang="python">score2</code>, assigned with the value, <code class="python inline-code" lang="python">3</code></item>
<item>prints <code class="python inline-code" lang="python">team1</code>, <code class="python inline-code" lang="python">"versus"</code>, and <code class="python inline-code" lang="python">team2</code> as a single line of output</item>
<item>prints <code class="python inline-code" lang="python">"Final score: "</code>, <code class="python inline-code" lang="python">score1</code>, <code class="python inline-code" lang="python">"to"</code>, <code class="python inline-code" lang="python">score2</code> as a single line of output</item>
</list></para>
<media alt="final_score_program">
<iframe width="660" height="371.4" src="../../media/interactive/coderunner/ch1/CodeRunner_01_04_04_Final-score.html"/>
</media>
</note>
</content>
</document>