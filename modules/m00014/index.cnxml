<document xmlns="http://cnx.rice.edu/cnxml" xmlns:m="http://www.w3.org/1998/Math/MathML">
  <title>Floating-point errors</title>
  <metadata xmlns:md="http://cnx.rice.edu/mdml">
    <md:title>Floating-point errors</md:title>
    <md:content-id>m00014</md:content-id>
    <md:uuid>db6d20a8-c640-4ea7-81ab-bea13792a4f0</md:uuid>
  </metadata>
  <content>
    <section id="sect-00001">
    <title>Learning objectives</title>
    <para id="para-00001">By the end of this section you should be able to</para>
    <list id="list-00001">
    <item>Explain numerical inaccuracies related to floating-point representation.</item>
    <item>Use the <code class="python inline-code">round()</code> function to mitigate floating-point errors in output.</item>
    </list>
    </section>
    <section id="sect-00002">
    <title>Floating-point errors</title>
    <para id="para-00101">Computers store information using 0s and 1s. All information must be converted to a string of 0s and 1s. Ex: 5 is converted to 101. Since only 2 values 0 or 1 are allowed the format is called binary.</para>


    <para id="para-00002">Floating-point values are stored as binary by Python. The conversion of a floating point number to the underlying binary results in specific types of floating-point errors.</para>
    <para id="para-00003"><span class="brown-code">A</span> <term id="term-00001"><span class="blue-code">round-off error</span></term> <span class="blue-code">occurs when floating-point values are stored erroneously as an approximation. The difference between an approximation of a value used in computation and the correct (true) value is called a round-off error.</span></para>
       <para id="para-00004"><span class="brown-code">Ex:</span> <span class="purple-code">Storing the float</span> (0.1)<sub>10</sub> <span class="purple-code">results in binary values that actually produce (0.1000000000000000055511151231257827021181583404541015625)<sub>10</sub> when converted back, which is not exactly equal to (0.1)<sub>10</sub>.</span></para>
    <table summary=" " id="table-00001">
    <title>Round-off error. (The example above shows a formatted string or f-string which are introduced in the Objects chapter.)</title>
    <tgroup cols="1">
    <tbody>
    <row>
    <entry><code class="python" lang="python"><span class="purple-code">
    # Print floats with 30 decimal places
    print(f'{0.1:.30f}') # prints 0.1
    print(f'{0.2:.30f}') # prints 0.2
    print(f'{0.4:.30f}') # prints 0.4
    </span></code></entry>
    <entry><code class="python" lang="python"><span class="purple-code">
    0.100000000000000005551115123126
    0.200000000000000011102230246252
    0.400000000000000022204460492503
    </span></code></entry>
    </row>
    </tbody>
    </tgroup>
    </table>
    <para id="para-00005"><span class="brown-code">An</span> <term id="term-00002"><span class="blue-code">overflow error</span></term> <span class="blue-code">occurs when a value is too large to be stored. The maximum and minimum floating-point values that can be represented are <m:math><m:mrow><m:mtext>1</m:mtext><m:mtext>.8</m:mtext><m:mo>&#x00D7;</m:mo><m:msup><m:mrow><m:mn>10</m:mn></m:mrow><m:mrow><m:mn>308</m:mn></m:mrow></m:msup></m:mrow></m:math> and <m:math><m:mrow><m:mo>&#x2212;</m:mo><m:mn>1.8</m:mn><m:mo>&#x00D7;</m:mo><m:msup><m:mrow><m:mn>10</m:mn></m:mrow><m:mrow><m:mn>308</m:mn></m:mrow></m:msup></m:mrow></m:math>, respectively. Attempting to store a floating-point value outside the range <m:math><m:mrow><m:mo>(</m:mo><m:mo>&#x2212;</m:mo><m:mn>1.8</m:mn><m:mo>&#x00D7;</m:mo><m:msup><m:mrow><m:mn>10</m:mn></m:mrow><m:mrow><m:mn>308</m:mn></m:mrow></m:msup><m:mo>,</m:mo><m:mn>1.8</m:mn><m:mo>&#x00D7;</m:mo><m:msup><m:mrow><m:mn>10</m:mn></m:mrow><m:mrow><m:mn>308</m:mn></m:mrow></m:msup><m:mo>)</m:mo></m:mrow></m:math> leads to an overflow error.</span></para>
    <para id="para-00006"><span class="brown-code">Below, <m:math><m:mrow><m:mtext>3</m:mtext><m:msup><m:mrow><m:mtext>.0</m:mtext></m:mrow><m:mrow><m:mn>256</m:mn></m:mrow></m:msup></m:mrow></m:math> and <m:math><m:mrow><m:mtext>3</m:mtext><m:msup><m:mrow><m:mtext>.0</m:mtext></m:mrow><m:mrow><m:mn>512</m:mn></m:mrow></m:msup></m:mrow></m:math> can be represented, but <m:math><m:mrow><m:mtext>3</m:mtext><m:msup><m:mrow><m:mtext>.0</m:mtext></m:mrow><m:mrow><m:mn>1024</m:mn></m:mrow></m:msup></m:mrow></m:math> is too large and causes an overflow error.</span></para>
    <table summary=" " id="table-00002">
    <title>Overflow error.</title>
    <tgroup cols="1">
    <tbody>
    <row>
    <entry><code class="python" lang="python"><span class="brown-code">
    print('3.0 to the power of 256 =', 3.0**256)
    print('3.0 to the power of 512 = ', 3.0**512)
    print('3.0 to the power of 1024 = ', 3.0**1024)
    </span></code></entry>
    <entry>
    <code class="python" lang="python"><span class="brown-code">
    3.0 to the power of 256 = 1.3900845237714473e+122
    3.0 to the power of 512 = 1.9323349832288915e+244
    3.0 to the power of 1024 =
    Traceback (most recent call last):
    &#160;&#160;File "&lt;stdin&gt;", line 3, in &lt;module>
    &#160;&#160;&#160;&#160;print('3.0 to the power of 1024 = ', 3.0**1024)
    OverflowError: (34, 'Numerical result out of range')
    </span></code></entry>
    </row>
    </tbody>
    </tgroup>
    </table>
    <note class="learning-questions" id="note-00001">
    <title>Floating-point errors</title>
    <para id="para-00007"><span class="purple-code">For each situation, which error occurs?</span></para>
    <exercise id="exer-00001">
    <problem id="prob-00001">
    <para id="para-00008"><link class="os-embed" url="#exercise/CPL-ch02-m04-p01"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00002">
    <problem id="prob-00002">
    <para id="para-00009"><link class="os-embed" url="#exercise/CPL-ch02-m04-p02"/></para>
    </problem>
    </exercise>
    </note>
    </section>
    <section id="sect-00003">
    <title>Floating point round<span class="brown-code">()</span> function</title>
    <para id="para-00010">Python's <term id="term-00003"><span class="brown-code">round()</span></term> function is used to round a floating-point number to a given number of decimal places. The function requires two arguments. <span class="brown-code">The first argument</span> is the number to be rounded. The second argument decides the number of decimal places to which the number is rounded. If the second argument is not provided, the number will be rounded to the closest whole number. The <span class="brown-code">round()</span> function can be used to mitigate floating-point errors.</para>
    <para id="para-00011"><span class="purple-code">Ex:</span></para>
    <list id="list-00002">
    <item><code class="python inline-code">round(2.451, 2) = 2.45</code></item>
    <item><code class="python inline-code">round(2.451) = 2</code></item>
    </list>
    <note class="guided-slides" id="note-00002">
    <title>Examples of round() function</title>
    <media alt="round_function_slides">
    <iframe width="660" height="371.4" src="https://www.openstax.org/r/round-function"/>
    </media>
    </note>
    <note class="learning-questions" id="note-00003">
    <title>Examples of round() function</title>
    <exercise id="exer-00003">
    <problem id="prob-00003">
    <para id="para-00012"><link class="os-embed" url="#exercise/CPL-ch02-m04-p03"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00004">
    <problem id="prob-00004">
    <para id="para-00013"><link class="os-embed" url="#exercise/CPL-ch02-m04-p04"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00005">
    <problem id="prob-00005">
    <para id="para-00014"><link class="os-embed" url="#exercise/CPL-ch02-m04-p05"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00006">
    <problem id="prob-00006">
    <para id="para-00015"><link class="os-embed" url="#exercise/CPL-ch02-m04-p06"/></para>
    </problem>
    </exercise>
    </note>
    </section>
   
    <note class="practice-program" id="note-00004">
    <title>Inaccurate tips</title>
    <para id="para-00016">The following code calculates the tip amount, given a bill amount and the tip ratio. Experiment with the following bill amount and tip ratios and see if any inaccuracies may result in calculating the tip amount.</para>
    <list id="list-00003">
    <item>bill amount: 22.70 and 33.33</item>
    <item>tip ratio: 0.15, 0.18, and 0.20</item>
    </list>
    <media alt="inaccurate_tips_program">
    <iframe width="660" height="371.4" src="../../media/interactive/coderunner/ch2/CodeRunner_02_05_06_Inaccurate-tips.html"/>
    </media>
    </note>
    <note class="practice-program" id="note-00005">
    <title>Area of a triangle</title>
    <para id="para-00017"><span class="purple-code">Complete the following steps to calculate a triangle's area, and print the result of each step.</span> The area of a triangle is <span class="blue-code"><m:math><m:mrow><m:mfrac><m:mrow><m:mi>b</m:mi><m:mi>h</m:mi></m:mrow><m:mn>2</m:mn></m:mfrac></m:mrow></m:math></span>, where <emphasis effect="italics">b</emphasis> is the base and <emphasis effect="italics">h</emphasis> is the height.</para>
    <list list-type="enumerated" id="list-00004">
    <item>Calculate the area of a triangle with base = 7 and height = 3.5.</item>
    <item>Round the triangle's area to one decimal place.</item>
    <item>Round the triangle's area to the nearest integer value.</item>
    </list>
    <media alt="area_of_a_triangle_program">
    <iframe width="660" height="371.4" src="../../media/interactive/coderunner/ch2/CodeRunner_02_05_07_Area-of-a-triangle.html"/>
    </media>
    </note>
    </content>
</document>