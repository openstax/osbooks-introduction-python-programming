<document xmlns="http://cnx.rice.edu/cnxml" xmlns:m="http://www.w3.org/1998/Math/MathML">
  <title>Output and input</title>
  <metadata xmlns:md="http://cnx.rice.edu/mdml">
    <md:title>Output and Input</md:title>
    <md:content-id>m00002</md:content-id>
    <md:uuid>074e7d3a-77f8-4515-b909-7de45f8ffcc6</md:uuid>
  </metadata>
  <content>
    <section class="learning-objectives" id="sect-00001">
      <title>Learning Objectives</title>
      <para id="para-00001">By the end of this section, you will be able to:</para>
        <list id="list-00001">
          <item>Produce program output data using the intrinsic Python function, print()</item>
          <item>Obtain user input data using the intrinsic Python function, input()</item>
        </list>
    </section>
    <section id="sect-00008">
      <title>Preformat test with a nested list</title>
      <list id="list-00003">
        <item>
          <preformat class="python inline-code">
            print("preformat on on just the code tag", end=" ")
          </preformat>
        </item>
        <item>
        <preformat class="python inline-code">print("sunny!")</preformat>
        </item>
      </list>
    </section>
    <section id="sect-00011">
      <title>Preformat test with para</title>

        <para id="para-00014">
          para with preformat. Hello here's some text bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla <preformat class="python inline-code">print("no display specified", end=" ")</preformat> bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla <preformat class="python inline-code">print("display="block", end=" ")</preformat> bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla.
        </para>

      <preformat class="python inline-code">
        print("With preformat and no display type specified", end=" ")
        print("sunny!")</preformat>
    </section>

    <section id="sect-00002">
      <title>Basic output</title>
      <para id="para-00002"> The purpose for producing output is to observe what occurs when a program runs. In Python, output is produced with <code class="python" lang="python">print(data)</code>. Ex. <code class="python" lang="python">print("Today is Monday")</code> will print "Today is Monday" to the screen. </para>
      <para id="para-00003"> Two or more data items separated by commas produce a single line of output. Ex. <code class="python" lang="python">print("The time is",  "8 AM")</code> will print "The time is 8 AM" to the screen on a single line.</para>
      <para id="para-00004">
        By default, <code class="python" lang="python">print(data)</code> introduces a new line after the output. <code class="python" lang="python">end=</code> is used to avoid a new line after the output. <newline/>
        Ex. "The weather for today is sunny!" is printed to the screen on a single line by the following: <newline/>
        <code class="python" lang="python">print("The weather for today is", end=" ")</code> <newline/>
        <code class="python" lang="python">print("sunny!")</code>
      </para>
      <note class="guided-slides participation-activity" id="sect-00003">
        <media alt="basic_output_slides">
          <iframe width="660" height="371.4" src="https://www.OS-placeholder.com/index.html"/>
        </media>
      </note>
      <note class="participation-activity learning-questions" id="sect-00004">
        <title>Basic output</title>
        <exercise id="exer-00003">
          <problem id="prob-00001">
            <para id="para-00005"><link class="os-embed" url="#exercise/prog-py-003"/></para>
          </problem>
        </exercise>
        <exercise id="exer-00004">
        <problem id="prob-00002">
          <para id="para-00006"><link class="os-embed" url="#exercise/prog-py-004"/></para>
        </problem>
        </exercise>
        <exercise id="exer-00005">
          <problem id="prob-00003">
            <para id="para-00007"><link class="os-embed" url="#exercise/prog-py-005"/></para>
          </problem>
        </exercise>
      </note>
    </section>
    <section id="sect-00005">
      <title>Basic input</title>
      <para id="para-00008"> When a computer program runs, it often requests input data from a user. In Python, input data is obtained with <code class="python" lang="python">named_item = input()</code>, where named_item stores the input entered by a user. Ex. <code class="python" lang="python">name = input()</code> stores the input entered by a user into name.</para>
      <note class="particpation-activity guided-slides" id="sect-00006">
        <media alt="basic_output_slides">
          <iframe width="660" height="371.4" src="https://www.OS-placeholder.com/index.html"/>
        </media>
      </note>
      <note class="participation-activity learning-questions" id="sect-00007">
        <title>Basic input</title>
        <exercise id="exer-00006">
          <problem id="prob-00004">
            <para id="para-00009"><link class="os-embed" url="#exercise/prog-py-006"/></para>
          </problem>
        </exercise>
        <exercise id="exer-00007">
        <problem id="prob-00005">
          <para id="para-00010"><link class="os-embed" url="#exercise/prog-py-007"/></para>
        </problem>
        </exercise>
        <exercise id="exer-00008">
          <problem id="prob-00006">
            <para id="para-00011"><link class="os-embed" url="#exercise/prog-py-008"/></para>
          </problem>
        </exercise>
      </note>
    </section>
      <note class="participation-activity practice-program" id="sect-00009">
        <title>Produce multiple lines of output</title>
        <para id="para-00012">Write a Python computer program that uses multiple print() statements to produce the following:</para>
        <code display="block">
I shall be telling this with a sigh
Somewhere ages and ages hence:
Two roads diverged in a wood, and I--
I took the one less traveled by,
And that has made all the difference.
        </code>
        <media alt="multi-line">
          <iframe width="660" height="371.4" src="https://zytools.zybooks.com/zyBooks2/open-stax-python-code-runner/index.html?parameters=%7B%22files%22%3A%5B%7B%22contents%22%3A%22%23%20Type%20your%20code%20after%20this%20comment%5Cn%22%2C%22name%22%3A%22main.py%22%2C%22solution%22%3A%22print(%5C%22I%20shall%20be%20telling%20this%20with%20a%20sigh%5C%22)%5Cnprint(%5C%22Somewhere%20ages%20and%20ages%20hence%3A%5C%22)%5Cnprint(%5C%22Two%20roads%20diverged%20in%20a%20wood%2C%20and%20I--%5C%22)%5Cnprint(%5C%22I%20took%20the%20one%20less%20traveled%20by%2C%5C%22)%5Cnprint(%5C%22And%20that%20has%20made%20all%20the%20difference.%5C%22)%22%7D%5D%2C%22input%22%3A%22%22%2C%22showSolution%22%3Atrue%7D"/>
        </media>
      </note>
      <note class="participation-activity practice-program" id="sect-00010">
        <title>Obtaining user input</title>
        <para id="para-00013">Write a Python computer program that</para>
        <list id="list-00002">
          <item>asks the user their name</item>
          <item>assigns their response to a variable, name</item>
          <item>asks the user what they like</item>
          <item>assigns their response to a variable, like</item>
          <item>prints a blank line of output</item>
          <item>prints the variable name, "likes", followed by the variable like as a single line of output</item>
        </list>
        <media alt="user_input">
          <iframe width="660" height="371.4" src="https://zytools.zybooks.com/zyBooks2/open-stax-python-code-runner/index.html?parameters=%7B%22files%22%3A%5B%7B%22contents%22%3A%22%23%20Type%20your%20code%20after%20this%20comment%5Cn%22%2C%22name%22%3A%22main.py%22%2C%22solution%22%3A%22print(%5C%22What%20is%20your%20name%3F%20%5C%22)%5Cnname%20%3D%20input()%5Cnprint(%5C%22What%20do%20you%20like%3F%20%5C%22)%5Cnlike%20%3D%20input()%5Cnprint()%5Cnprint(name%2C%20%5C%22likes%5C%22%2C%20like)%5Cn%22%7D%5D%2C%22input%22%3A%22%22%2C%22showSolution%22%3Atrue%7D"/>
        </media>
      </note>
  </content>
</document>