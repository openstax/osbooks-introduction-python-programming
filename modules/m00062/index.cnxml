<document xmlns="http://cnx.rice.edu/cnxml">
  <title>String formatting</title>
  <metadata xmlns:md="http://cnx.rice.edu/mdml">
    <md:title>String formatting</md:title>
    <md:content-id>m00062</md:content-id>
    <md:uuid>bd1b0229-5966-4f27-91a2-9e1750cf8a14</md:uuid>
  </metadata>
  <content>
    <section id="sect-00001">
    <title>Learning objectives</title>
    <para id="para-00001">By the end of this section you should be able to</para>
    <list id="list-00001">
    <item>Format a string template using input arguments.</item>
    <item>Use format() function to generate numerical formats based on a given template.</item>
    </list>
    </section>
    <section id="sect-00002">
    <title>String format specification</title>
    <para id="para-00002">Python provides string substitutions syntax for formatting strings with input arguments. <term id="term-00001">Formatting string</term> includes specifying string pattern rules and modifying the string according to the formatting specification. Examples of formatting strings include using patterns for building different string values and specifying modification rules for string's length and alignment.</para>
    </section>
    <section id="sect-00003">
    <title>String formatting with replacement fields</title>
    <para id="para-00003"><term id="term-00002">Replacement fields</term> are used to define a pattern for creating multiple string values that comply with a given format. The example below shows two string values that use the same template for making requests to different individuals for taking different courses.</para>
    <example id="exam-00001">
    <title>String values from the same template</title>
    <code class="python" lang="python">
    Dear John, I'd like to take programming course with Prof. Potter.<newline/>
    Dear Kishwar, I'd like to take math course with Prof. Robinson.
    </code>
    </example>

    <para id="para-00004">In the example above, replacement fields are 1) the name of the individual the request is being made to 2) title of the course, and 3) the name of the instructor. To create a template, replacement fields can be added with <code class="python inline-code">{}</code> to show a placeholder for user input. The <term id="term-00003">format()</term> function is used to pass inputs for replacement fields in a string template.</para>
    <example id="exam-00002">
    <title>String template formatting for course enrollment requests</title>
    <para id="para-00005">String template with replacement fields is defined below to create string values with different input arguments. The format() function is used to pass inputs to the template in the same order.</para>
    <code class="python" lang="python">
    s = "Dear {}, I'd like to take {} course with Prof. {}."<newline/>
    print(s)
    print(s.format("John", "programming", "Potter"))
    print(s.format("Kishwar", "math", "Robinson"))<newline/>
    </code>
    <para id="para-00006">The above code's output is:</para>
    <code class="python" lang="python">
    Dear {}, I'd like to take {} course with Prof. {}.
    Dear John, I'd like to take programming course with Prof. Potter.
    Dear Kishwar, I'd like to take math course with Prof. Robinson.
    </code>
    </example>
    <note class="learning-questions" id="note-00002">
    <title>String template and formatting</title>
    <exercise id="exer-00001">
    <problem id="prob-00001">
    <para id="para-00007"><link class="os-embed" url="#exercise/CPL-ch08-m04-p01"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00002">
    <problem id="prob-00002">
    <para id="para-00008"><link class="os-embed" url="#exercise/CPL-ch08-m04-p02"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00003">
    <problem id="prob-00003">
    <para id="para-00009"><link class="os-embed" url="#exercise/CPL-ch08-m04-p03"/></para>
    </problem>
    </exercise>
    </note>
    </section>
    <section id="sect-00004">
    <title>Named replacement fields</title>
    <para id="para-00010">Replacement fields can be tagged with a label, called <term id="term-00004">named replacement fields</term>, for ease of access and code readability. The example below illustrates how named replacement fields can be used in string templates.</para>
    <example id="exam-00003">
    <title>Season weather template using named replacement fields</title>
    <para id="para-00011">A named replacement argument is a convenient way of assigning name tags to replacement fields and passing values associated with replacement fields using corresponding names (instead of passing values in order).</para>
    <code class="python" lang="python">
    s = "Weather in {season} is {temperature}."<newline/>
    print(s)
    print(s.format(season = "summer", temperature = "hot"))
    print(s.format(season = "winter", temperature = "cold"))<newline/>
    </code>
    <para id="para-00012">The above code's output is:</para>
    <code class="python" lang="python">
    Weather in {season} is {temperature}.
    Weather in summer is hot.
    Weather in winter is cold.
    </code>
    </example>
    <note id="note-00003">
    <title>Multiple use of a named argument</title>
    <para id="para-00013">Since named replacement fields are referred to using a name key, a named replacement field can appear and be used more than once in the template. Also, positional ordering is not necessary when named replacement fields are used.</para>
    <code class="python" lang="python">
    s = "Weather in {season} is {temperature}; very very {temperature}."<newline/>
    print(s)
    print(s.format(season = "summer", temperature = "hot"))
    print(s.format(temperature = "cold", season = "winter"))<newline/>
    </code>
    <para id="para-00014">The above code's output is:</para>
    <code class="python" lang="python">
    Weather in {season} is {temperature}; very very {temperature}.
    Weather in summer is hot; very very hot.
    Weather in winter is cold; very very cold.
    </code>
    </note>
    <note class="learning-questions" id="note-00004">
    <title>Named replacement field examples</title>
    <exercise id="exer-00004">
    <problem id="prob-00004">
    <para id="para-00015"><link class="os-embed" url="#exercise/CPL-ch08-m04-p04"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00005">
    <problem id="prob-00005">
    <para id="para-00016"><link class="os-embed" url="#exercise/CPL-ch08-m04-p05"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00006">
    <problem id="prob-00006">
    <para id="para-00017"><link class="os-embed" url="#exercise/CPL-ch08-m04-p06"/></para>
    </problem>
    </exercise>
    </note>
    </section>
    <section id="sect-00005">
    <title>Numbered replacement fields</title>
    <para id="para-00018">Python's string <code class="python inline-code">format()</code> function can use positional ordering to match the numbered arguments. The replacement fields that use the positional ordering of arguments are called <term id="term-00005">numbered replacement fields</term>. The indexing of the arguments starts from 0. Ex: <code class="python inline-code">print("{1}{0}".format("Home", "Welcome"))</code> outputs string value <code class="python inline-code">"Welcome Home"</code> as the first argument, <code class="python inline-code">"Home"</code>, is at index 0 and the second argument, <code class="python inline-code">"Welcome"</code>, is at index 1. Replacing these arguments in the order of <code class="python inline-code">"{1}{0}"</code> creates string <code class="python inline-code">"Welcome Home"</code>.</para>
    <para id="para-00019">Numbered replacement fields can use argument's values for multiple replacement fields by using the same argument index. Example below illustrates how an argument is used for more than one numbered replacement fields.</para>
    <example id="exam-00004">
    <title>Numbered replacement field to build a phrase</title>
    <para id="para-00020">Numbered replacement fields are used in this example to build phrases like "very very cold" or "very hot".</para>
    <code class="python" lang="python">
    template1 = "{0} {0} {1}"
    template2 = "{0} {1}"<newline/>
    print(template1.format("very", "cold"))
    print(template2.format("very", "hot"))<newline/>
    </code>
    <para id="para-00021">The above code's output is:</para>
    <code class="python" lang="python">
    very very cold
    very hot
    </code>
    </example>
    </section>
    <section id="sect-00006">
    <title>String length and alignment formatting</title>
    <para id="para-00022">Formatting the string length may be needed for standardizing the output style when multiple string values of the same context are being created and printed. Example below shows a use case of string formatting in printing a table with minimum-length columns and specific alignment.</para>
    <example id="exam-00005">
      <title>Numbered replacement field to build a phrase</title>
    <para id="para-00035">A formatted table of a class roster</para>
    <code class="python" lang="python">
    Student Name              Major          Grade
    ----------------------------------------------
    Manoj Sara          Computer Science        A-
    Gabriel Wang     Electrical Engineering      A
    Alex Narayanan       Social Sciences        A+
    </code>
    </example>

    <para id="para-00023">In the example above, the table is formatted into 3 columns. The first column takes up 15 characters and is left-aligned. The second column uses 25 characters and is center-aligned, and the last column uses 2 characters and is right aligned. Alignment and length format specifications controls are used to create the formatted table above.</para>
    <para id="para-00024">The field width in string format specification is used to specify the minimum length of the given string. If the string is shorter than the given minimum length, the string will be padded by space characters. A <term id="term-00006">field width</term> is included in the format specification field using an integer after a colon. Ex: <code class="python inline-code">{name:15}</code> specifies that the minimum length of the string values that are passed to the <code class="python inline-code">name</code> field is 15.</para>
    <para id="para-00025">Since the field width can be used to specify the minimum length of a string, the string can be padded with space characters from right, left, or both to be left-aligned, right-aligned, and centered, respectively. The <term id="term-00007">string alignment type</term> is specified using <code class="python inline-code">&lt;</code>, <code class="python inline-code">></code>, or <code class="python inline-code">^</code>characters after the colon when field length is specified. Ex: <code class="python inline-code">{name:^20}</code> specifies a named replacement field with the minimum length of 20 characters which is center-aligned.</para>
    <table summary=" " id="table-00002">
    <title>String alignment formatting</title>
    <tgroup cols="4">
    <thead>
    <row>
    <entry>Alignment Type</entry>
    <entry>Symbol</entry>
    <entry>Example</entry>
    <entry>Output</entry>
    </row>
    </thead>
    <tbody>
    <row>
    <entry>Left-aligned</entry>
    <entry><para id="para-00041"><code class="python inline-code">&lt;</code></para></entry>
    <entry><para id="para-00042"><code class="python inline-code">
    template = "{hex:&lt;7}{name:&lt;10}"
    print(template.format(hex = "#FF0000", name = "Red"))
    print(template.format(hex = "#00FF00", name = "green"))</code></para>
    </entry>
    <entry><para id="para-00043"><code class="python inline-code">
    #FF0000Red
    #00FF00green</code></para></entry>
    </row>
    <row>
    <entry>Right-aligned</entry>
    <entry><para id="para-00044"><code class="python inline-code">></code></para></entry>
    <entry><para id="para-00045"><code class="python inline-code">
    template = "{hex:>7}{name:>10}"
    print(template.format(hex = "#FF0000", name = "Red"))
    print(template.format(hex = "#00FF00", name = "green"))</code></para></entry>
    <entry><para id="para-00046"><code class="python inline-code">
    #FF0000      Red
    #00FF00    green</code></para></entry>
    </row>
    <row>
    <entry>Centered</entry>
    <entry>^</entry>
    <entry><para id="para-00047"><code class="python inline-code">
    template = "{hex:^7}{name:^10}"
    print(template.format(hex = "#FF0000", name = "Red"))
    print(template.format(hex = "#00FF00", name = "green"))</code></para></entry>
    <entry><para id="para-00048"><code class="python inline-code">
    #FF0000   Red
    #00FF00  green</code></para></entry>
    </row>
    </tbody>
    </tgroup>
    </table>
    <note class="learning-questions" id="note-00005">
    <title>Specifying field width and alignment</title>
    <exercise id="exer-00007">
    <problem id="prob-00007">
    <para id="para-00026"><link class="os-embed" url="#exercise/CPL-ch08-m04-p07"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00008">
    <problem id="prob-00008">
    <para id="para-00027"><link class="os-embed" url="#exercise/CPL-ch08-m04-p08"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00009">
    <problem id="prob-00009">
    <para id="para-00028"><link class="os-embed" url="#exercise/CPL-ch08-m04-p09"/></para>
    </problem>
    </exercise>
    </note>
    </section>
    <section id="sect-00007">
    <title>Formatting numbers</title>
    <para id="para-00029">The format() function can be used to format numerical values. Numerical values can be padded to have a given minimum length, precision, and sign character. The syntax for modifying numeric values follows the <code class="python inline-code">{[index]:[width][.precision][type]}</code> structure. In the given syntax,</para>
    <list id="list-00002">
    <item>The <code class="python inline-code">index</code> field refers to the index of the argument.</item>
    <item>The <code class="python inline-code">width</code> field refers to the minimum length of the string.</item>
    <item>The <code class="python inline-code">precision</code> field refers to the floating-point precision of the given number.</item>
    <item>The <code class="python inline-code">type</code> field shows the type of the input that is passed to the format() function. Floating-point and decimal inputs are identified by <code class="python inline-code">'f'</code> and <code class="python inline-code">'d'</code>, respectively. String values are also identified by <code class="python inline-code">'s'</code>.</item>
    </list>
    <para id="para-00030">The table below summarizes formatting options for modifying numeric values.</para>
    <table summary=" " id="table-00003">
    <title>Numerical formatting options</title>
    <tgroup cols="3">
    <thead>
    <row>
    <entry>Example</entry>
    <entry>Output</entry>
    <entry>Explanation</entry>
    </row>
    </thead>
    <tbody>
    <row>
    <entry><para id="para-00049"><code class="python inline-code">print("{:.7f}".format(0.9795))</code></para></entry>
    <entry><para id="para-00050"><code class="python inline-code">0.9795000</code></para></entry>
    <entry><para id="para-00051">The format specification <code class="python inline-code">.7</code> shows the output must have 7 decimal places. The <code class="python inline-code">f</code> specification is an identifier of floating-point formatting.</para></entry>
    </row>
    <row>
    <entry><para id="para-00052"><code class="python inline-code">print("{:.3f}".format(12))</code></para></entry>
    <entry><para id="para-00053"><code class="python inline-code">12.000</code></para></entry>
    <entry><para id="para-00054">The format specification <code class="python inline-code">.3</code> shows the output must have 3 decimal places. The <code class="python inline-code">f</code> specification is an identifier of floating-point formatting.</para></entry>
    </row>
    <row>
    <entry><para id="para-00055"><code class="python inline-code">print("{:+.2f}".format(4))</code></para></entry>
    <entry><para id="para-00056"><code class="python inline-code">+4.00</code></para></entry>
    <entry><para id="para-00057">The format specification <code class="python inline-code">.2</code> shows the output must have 2 decimal places. The <code class="python inline-code">f</code> specification is an identifier of floating-point formatting. The <code class="python inline-code">+</code> sign before the precision specification adds a sign character to the output.</para></entry>
    </row>
    <row>
    <entry><para id="para-00058"><code class="python inline-code">print("{:0>5d}".format(5))</code></para></entry>
    <entry><para id="para-00059"><code class="python inline-code">00005</code></para></entry>
    <entry><para id="para-00060">The format specification <code class="python inline-code">0>5</code> defines the width field as 5 and hence the output must have a minimum length of 5 and if the number has less than 5 digits, the number must be padded with 0's from the left side. The <code class="python inline-code">d</code> specification is an identifier of a decimal number formatting.</para></entry>
    </row>
    <row>
    <entry><para id="para-00061"><code class="python inline-code">print("{:.3s}".format("12.50"))</code></para></entry>
    <entry><para id="para-00062"><code class="python inline-code">12.</code></para></entry>
    <entry><para id="para-00063">The format specification <code class="python inline-code">.3</code> shows the output will have 3 characters. The <code class="python inline-code">s</code> specification is an identifier of string formatting.</para></entry>
    </row>
    </tbody>
    </tgroup>
    </table>
    <note class="learning-questions" id="note-00006">
    <title>Numeric value formatting examples</title>
    <exercise id="exer-00010">
    <problem id="prob-00010">
    <para id="para-00031"><link class="os-embed" url="#exercise/CPL-ch08-m04-p10"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00011">
    <problem id="prob-00011">
    <para id="para-00032"><link class="os-embed" url="#exercise/CPL-ch08-m04-p11"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00012">
    <problem id="prob-00012">
    <para id="para-00033"><link class="os-embed" url="#exercise/CPL-ch08-m04-p12"/></para>
    </problem>
    </exercise>
    </note>
    </section>
    
    <note class="practice-program" id="note-00007">
    <title>Formatting a list of numbers</title>
    <para id="para-00034">Given a list of numbers (floating-point or integer), print numbers with 2 decimal place precision and at least 6 characters.</para>
    <code class="python" lang="python">
    Input: [12.5, 2]
    </code>
    <code class="python" lang="python">
    Prints: 012.50<newline/>
    002:00
    </code>
    <media alt="formatting_a_list_of_numbers_program">
    <iframe width="660" height="371.4" src="../../media/interactive//coderunner/ch8/CodeRunner_08_05_06_Formatting-a-list-of-numbers.html"/>
    </media>
    </note>
    </content>
</document>