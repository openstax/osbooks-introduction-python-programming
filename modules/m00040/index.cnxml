<document xmlns="http://cnx.rice.edu/cnxml">
  <title>Break and continue</title>
  <metadata xmlns:md="http://cnx.rice.edu/mdml">
    <md:title>Break and continue</md:title>
    <md:content-id>m00040</md:content-id>
    <md:uuid>9619f27c-b4e7-44f1-bb1a-dc2b90b79e76</md:uuid>
  </metadata>
  <content>
    <section id="sect-00001">
    <title>Learning objectives</title>
    <para id="para-00001">By the end of this section you should be able to</para>
    <list id="list-00001">
    <item>Analyze <span class="red-code">a</span> loop's execution with <code class="python inline-code">break</code> and <code class="python inline-code">continue</code> statements.</item>
    <item>Use <code class="python inline-code">break</code> and <code class="python inline-code">continue</code> control statements <span class="red-code">in</span> <code class="python inline-code">while</code> and <code class="python inline-code">for</code> loops.</item>
    </list>
    </section>
    <section id="sect-00002">
    <title>Break</title>
    <para id="para-00002">A <term id="term-00001">break</term> statement <span class="blue-code">is</span> used within a <code class="python inline-code">for</code> or a <code class="python inline-code">while</code> loop to allow <span class="red-code">the program execution to exit</span> the loop once a given condition is triggered. A use case of a <code class="python inline-code">break</code> statement includes runtime efficiency when further loop's execution is not required.</para>
    <para id="para-00003"><span class="blue-code">Ex: A loop that counts up starting from 1 until the second number that is divisible by both 2 and 5 is found.</span></para>
    <code class="python" lang="python">
    count = 0<newline/>
    index = 1
    while count &lt; 2:
    &#160;&#160;if index % 2 == 0 and index % 5 == 0:
    &#160;&#160;&#160;&#160;count += 1
    &#160;&#160;if count == 2:
    &#160;&#160;&#160;&#160;break
    &#160;&#160;index += 1<newline/>
    print(index)<newline/>
    </code>
    <note class="guided-slides" id="note-00001">
    <title>Break statement in a while loop.</title>
    <media alt="while_break_slides">
    <iframe width="660" height="371.4" src="https://www.openstax.org/r/while-break"/>
    </media>
    </note>
    <note id="note-00002">
    <title>Infinite loop</title>
    <para id="para-00004">A <code class="python inline-code">break</code> statement is an essential part of a loop without a termination condition. A loop without a termination condition is known as an <term id="term-00002">infinite loop</term>. Ex: An infinite loop that counts up starting from 1 and prints the counter's value while the counter's value is less than 10. A break condition is triggered when the counter's value is equal to 10, and hence the program execution exits.</para>
    <code class="python" lang="python">
    counter = 1
    while True:
    &#160;&#160;if counter &gt;= 10:
    &#160;&#160;&#160;&#160;break
    &#160;&#160;print(counter)
    &#160;&#160;counter += 1
    </code>
    </note>
    <note class="learning-questions" id="note-00003">
    <title>Using a break statement.</title>
    <exercise id="exer-00001">
    <problem id="prob-00001">
    <para id="para-00005"><link class="os-embed" url="#exercise/CPL-ch05-m04-p01"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00002">
    <problem id="prob-00002">
    <para id="para-00006"><link class="os-embed" url="#exercise/CPL-ch05-m04-p02"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00003">
    <problem id="prob-00003">
    <para id="para-00007"><link class="os-embed" url="#exercise/CPL-ch05-m04-p03"/></para>
    </problem>
    </exercise>
    </note>
    </section>
    <section id="sect-00003">
    <title>Continue</title>
    <para id="para-00008">A <term id="term-00003">continue</term> statement allows for skipping the execution of the remainder of the loop without exiting the loop entirely. A <code class="python inline-code">continue</code> statement can be used in a <code class="python inline-code">for</code> or a <code class="python inline-code">while</code> loop. After the <code class="python inline-code">continue</code> statement's execution, the loop expression will be evaluated again and the loop will continue from the loop's <span class="red-code">expression</span>. A <code class="python inline-code">continue</code> statement facilitates loop's control and readability.</para>
    <example id="exam-00001">
    <title>Printing multiples of 5 between 1 and 20.</title>
    <para id="para-00009">In the code examples below, the code on the left prints <code class="python inline-code">i</code>'s value unless the condition <code class="python inline-code">i%5 !== 0</code> is triggered. The code on the right prints <code class="python inline-code">i</code>'s value when the condition <code class="python inline-code">i%5 == 0</code> is triggered. The code on the left performs the print operation by default, but the code on the right is written so that in case a given condition is true, the operation is performed. As such, the code on the right can become less readable due to the additional nesting.</para>
    <table summary=" " id="table-00001">
    <tgroup cols="1">
    <tbody>
    <row>
    <entry><code class="python" lang="python">
    for i in range(1, 21):
    &#160;&#160;if i%5 != 0:
    &#160;&#160;&#160;&#160;continue
    &#160;&#160;print(i)
    </code>
    </entry>
    <entry><code class="python" lang="python">
    for i in range(1, 21):
    &#160;&#160;if i%5 == 0:
    &#160;&#160;&#160;&#160;print(i)
    </code>
    </entry>
    </row>
    </tbody>
    </tgroup>
    </table>
    </example>
    <note class="guided-slides" id="note-00004">
    <title>Control statement in a while loop.</title>
    <media alt="while_control_slides">
    <iframe width="660" height="371.4" src="https://www.openstax.org/r/while-control"/>
    </media>
    </note>
    <note class="learning-questions" id="note-00005">
    <title>Using a continue statement.</title>
    <exercise id="exer-00004">
    <problem id="prob-00004">
    <para id="para-00010"><link class="os-embed" url="#exercise/CPL-ch05-m04-p04"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00005">
    <problem id="prob-00005">
    <para id="para-00011"><link class="os-embed" url="#exercise/CPL-ch05-m04-p05"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00006">
    <problem id="prob-00006">
    <para id="para-00012"><link class="os-embed" url="#exercise/CPL-ch05-m04-p06"/></para>
    </problem>
    </exercise>
    </note>
    </section>
    <section id="sect-00004">
    <title>Programming Practices</title>
    <note class="practice-program" id="note-00006">
    <title>Using break control statement in a loop.</title>
    <para id="para-00013">Write a program that reads a string value and prints "Found" if the string contains a space character, else prints "Not found".</para>
    <media alt="using_break_control_statement_in_a_loop_program">
    <iframe width="660" height="371.4" src="../../media/interactive//coderunner/ch5/CodeRunner_05_05_07_Using-break-control-statement-in-a-loop.html"/>
    </media>
    </note>
    <note class="practice-program" id="note-00007">
    <title>Using a continue statement in a loop.</title>
    <para id="para-00014">Complete the following <span class="blue-code">code</span> so that the program calculates <span class="blue-code">the</span> sum of all the numbers in list my_list that are greater than <span class="blue-code">or equal to</span> 5.</para>
    <media alt="using_a_continue_statement_in_a_loop_program">
    <iframe width="660" height="371.4" src="../../media/interactive//coderunner/ch5/CodeRunner_05_05_08_Using-a-continue-statement-in-a-loop.html"/>
    </media>
    </note>
    </section>
    </content>
</document>