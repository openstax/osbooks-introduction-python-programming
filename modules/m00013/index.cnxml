<document xmlns="http://cnx.rice.edu/cnxml">
  <title>Mixed data types</title>
  <metadata xmlns:md="http://cnx.rice.edu/mdml">
    <md:title>Mixed data types</md:title>
    <md:content-id>m00013</md:content-id>
    <md:uuid>1d302bc8-f35e-44c8-a300-97b2f0e5bc0e</md:uuid>
  </metadata>
  <content>
    <section id="sect-00001">
    <title>Learning objectives</title>
    <para id="para-00001">By the end of this section you should be able to</para>
    <list id="list-00001">
    <item>Identify the data types produced by operations with integers, floats, and strings.</item>
    <item>Use operators and type conversions to combine integers, floats, and strings.</item>
    </list>
    </section>
    <section id="sect-00002">
    <title>Combining integers and floats</title>
    <para id="para-00002">Programmers often need to combine numbers of different data types. Ex: A program computes the total for an online shopping order:</para>
    <code class="python" lang="python">
    quantity = int(input())
    price = float(input())
    total = quantity * price
    print(total)</code>
  <para id="para-00022"><code class="python inline-code">quantity</code> is an integer, and <code class="python inline-code">price</code> is a float. So what is the data type of <code class="python inline-code">total</code>? For input 3 and 5.0, <code class="python inline-code">total</code> is a float, and the program prints 15.0.</para>
    <para id="para-00003">Combining an integer and a float produces a float. A float is by default printed with at least one decimal point and has many decimal places as needed to represent the value. Note: Division using the <code class="python inline-code">/</code> operator always produces a float.</para>
    <note class="guided-slides" id="note-00001">
    <title>Operations combining integers and floats</title>
    <media alt="combining_int_float_slides">
    <iframe width="660" height="371.4" src="https://www.openstax.org/r/combining-int-float"/>
    </media>
    </note>
    <note class="learning-questions" id="note-00002">
    <title>Operations combining integers and floats</title>
    <exercise id="exer-00001">
    <problem id="prob-00001">
    <para id="para-00004"><link class="os-embed" url="#exercise/CPL-ch02-m03-p01"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00002">
    <problem id="prob-00002">
    <para id="para-00005"><link class="os-embed" url="#exercise/CPL-ch02-m03-p02"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00003">
    <problem id="prob-00003">
    <para id="para-00006"><link class="os-embed" url="#exercise/CPL-ch02-m03-p03"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00004">
    <problem id="prob-00004">
    <para id="para-00007"><link class="os-embed" url="#exercise/CPL-ch02-m03-p04"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00005">
    <problem id="prob-00005">
    <para id="para-00008"><link class="os-embed" url="#exercise/CPL-ch02-m03-p05"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00006">
    <problem id="prob-00006">
    <para id="para-00009"><link class="os-embed" url="#exercise/CPL-ch02-m03-p06"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00007">
    <problem id="prob-00007">
    <para id="para-00010"><link class="os-embed" url="#exercise/CPL-ch02-m03-p07"/></para>
    </problem>
    </exercise>
    </note>
    </section>
    <section id="sect-00003">
    <title>Combining numeric types and strings</title>
    <para id="para-00011">Easy type conversion in Python can lead a programmer to assume that any data type can be combined with another. Ex: Noor's program reads in a number from input and <span class="red-code">uses the number</span> in a calculation. <span class="red-code">This results in an error in the program because the input() function by default stores the number as a string.</span> Strings and numeric data types are incompatible for addition, subtraction, and division. One of the operands needs to be <span class="red-code">explicitly</span> converted depending on the goal of arithmetic or string concatenation.</para>
    <para id="para-00012">The * operator also serves as the repetition operator, which accepts a string operand and an integer operand and <span class="purple-code">repeats</span> the string. Ex: 'banjo' * 3 produces 'banjobanjobanjo'.</para>
    <note class="guided-slides" id="note-00003">
    <title>Adding a string and an integer</title>
    <media alt="adding_str_int_slides">
    <iframe width="660" height="371.4" src="https://www.openstax.org/r/adding-str-int"/>
    </media>
    </note>
    <note class="learning-questions" id="note-00004">
    <title>Operations combining numeric types and strings</title>
    <exercise id="exer-00008">
    <problem id="prob-00008">
    <para id="para-00013"><link class="os-embed" url="#exercise/CPL-ch02-m03-p08"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00009">
    <problem id="prob-00009">
    <para id="para-00014"><link class="os-embed" url="#exercise/CPL-ch02-m03-p09"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00010">
    <problem id="prob-00010">
    <para id="para-00015"><link class="os-embed" url="#exercise/CPL-ch02-m03-p10"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00011">
    <problem id="prob-00011">
    <para id="para-00016"><link class="os-embed" url="#exercise/CPL-ch02-m03-p11"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00012">
    <problem id="prob-00012">
    <para id="para-00017"><link class="os-embed" url="#exercise/CPL-ch02-m03-p12"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00013">
    <problem id="prob-00013">
    <para id="para-00018"><link class="os-embed" url="#exercise/CPL-ch02-m03-p13"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00014">
    <problem id="prob-00014">
    <para id="para-00019"><link class="os-embed" url="#exercise/CPL-ch02-m03-p14"/></para>
    </problem>
    </exercise>
    </note>
    </section>
    <section id="sect-00004">
    <title>Programming practice</title>
    <note class="practice-program" id="note-00005">
    <title>After the point</title>
    <para id="para-00020">Write a program that reads in a string of digits that represent the digits after the decimal point of a number, num. Concatenate the input string together with '.' and num, and print the result. Ex: <span class="blue-code">I</span>f input is 345, the program will print 2.345.</para>
    <media alt="after_the_point_program">
    <iframe width="660" height="371.4" src="../../media/interactive/coderunner/ch2/CodeRunner_02_04_04_After-the-point.html"/>
    </media>
    </note>
    <note class="practice-program" id="note-00006">
    <title>Print n times</title>
    <para id="para-00021">Write a program that reads in two strings, <code class="python inline-code">str1</code> and <code class="python inline-code">str2</code>, and an integer, <code class="python inline-code">count</code>. Concatenate the two strings with a space in between and a newline (<code class="python inline-code">"\n"</code>) at the end. Print the resulting string <code class="python inline-code">count</code> times.</para>
    <media alt="print_n_times_program">
    <iframe width="660" height="371.4" src="../../media/interactive/coderunner/ch2/CodeRunner_02_04_05_Print-n-times.html"/>
    </media>
    </note>
    </section>
    </content>
</document>