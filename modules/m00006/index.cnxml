<document xmlns="http://cnx.rice.edu/cnxml" xmlns:m="http://www.w3.org/1998/Math/MathML">
  <title>Comments</title>
  <metadata xmlns:md="http://cnx.rice.edu/mdml">
    <md:title>Comments</md:title>
    <md:content-id>m00006</md:content-id>
    <md:uuid>f76aaef1-226c-4625-852e-2da19ffaf476</md:uuid>
  </metadata>
  <content>
    <section class="learning-objectives" id="sect-00001">
      <title>Learning Objectives</title>
      <para id="para-00001">By the end of this section, you will be able to:</para>
        <list id="list-00001">
          <item>Understand how comment statements improve readability and comprehension of program code.</item>
          <item>Write concise, meaningful comments that explain intended functionality of the code.</item>
          <item>Write a more verbose comment known as a docstring that describes the program functionality.</item>
        </list>
    </section>
    <section id="sect-00002">
      <title>Comments</title>
      <para id="para-00002"><term id="term-00001">Comments</term> are short phrases that explain what the code is doing. Ex: Lines 1, 9, and 11 in the following program contain comments. Each comment begins with a hash character (#). All text from the hash character to the end of the line is ignored when running the program. In contrast, hash characters inside of strings are treated as regular text. Ex: The string <code class="python">Item #1: "</code> does not contain a comment.</para>
      <list id="list-00002">
        <item>The # character should be followed by a single space. Ex: <code class="python"># end of menu</code> is easier to read than <code class="python">#end of menu</code>.</item>
        <item>Comments should explain the purpose of the code, not just repeat the code itself. Ex: # get the user's preferences is more descriptive than # input item1 and item2.</item>
      </list>
      <example id="exam-00001">
        <code class="python" display="block">
# display the menu options
print("----------")
print("Lunch Menu")
print("----------")
print("Burrito")
print("Enchilada")
print("Taco")
print("Salad")
print()  # end of menu

# get the user's preferences
item1 = input("Item #1: ")
item2 = input("Item #2: ")</code>
      </example>
      <note class="participation-activity learning-questions" id="sect-00003">
        <title>Comments</title>
        <exercise id="exer-00001">
          <problem id="prob-00001">
            <para id="para-00003"><link class="os-embed" url="#exercise/prog-py-030"/></para>
          </problem>
        </exercise>
        <exercise id="exer-00002">
          <problem id="prob-00002">
            <para id="para-00004"><link class="os-embed" url="#exercise/prog-py-031"/></para>
          </problem>
        </exercise>
        <exercise id="exer-00003">
          <problem id="prob-00003">
            <para id="para-00005"><link class="os-embed" url="#exercise/prog-py-032"/></para>
          </problem>
        </exercise>
      </note>
    </section>
    <section id="sect-00004">
      <title>Code quality</title>
      <para id="para-00006">Programmers spend a lot more time reading code than writing code. Therefore, making code easier for others to read and understand is important. Two ways to improve code quality include:</para>
      <list id="list-00003">
        <item>Separate each step with a blank line.</item>
        <item>Write a comment before each step.</item>
      </list>
      <para id="para-00007">Ex: The program in the previous subsection had two steps: (1) display the menu options, and (2) get the user's preferences. Together, the blank lines and comments show the overall structure of the program. Not every line needs to be commented.</para>
      <note class="guided-slides participation-activity" id="sect-00005">
        <media alt="comments_in_program">
          <iframe width="660" height="371.4" src="https://www.OS-placeholder.com/index.html"/>
        </media>
      </note>
      <note class="participation-activity learning-questions" id="sect-00006">
        <title>Code quality</title>
        <exercise id="exer-00004">
          <problem id="prob-00004">
            <para id="para-00008"><link class="os-embed" url="#exercise/prog-py-033"/></para>
          </problem>
        </exercise>
        <exercise id="exer-00005">
          <problem id="prob-00005">
            <para id="para-00009"><link class="os-embed" url="#exercise/prog-py-034"/></para>
          </problem>
        </exercise>
        <exercise id="exer-00006">
          <problem id="prob-00006">
            <para id="para-00010"><link class="os-embed" url="#exercise/prog-py-035"/></para>
          </problem>
        </exercise>
      </note>
    </section>
    <section id="sect-00007">
      <title>Documentation</title>
      <para id="para-00011">Python programs may optionally begin with a string known as a <term id="term-00002">docstring</term>. A docstring is documentation written for others who will use the program but not necessarily read the source code. Most of the official documentation at <link url="https://docs.python.org/">docs.python.org</link> is generated from docstrings.</para>
      <para id="para-00013">Because of their length, docstrings are generally written as multi-line strings ("""). Common elements of a docstring include a one-line summary, a blank line, and a longer description.</para>
      <note class="guided-slides participation-activity" id="sect-00008">
        <media alt="vacations_docstring">
          <iframe width="660" height="371.4" src="https://www.OS-placeholder.com/index.html"/>
        </media>
      </note>
      <note class="participation-activity learning-questions" id="sect-00009">
        <title>Documentation</title>
        <exercise id="exer-00007">
          <problem id="prob-00007">
            <para id="para-00014"><link class="os-embed" url="#exercise/prog-py-036"/></para>
          </problem>
        </exercise>
        <exercise id="exer-00008">
          <problem id="prob-00008">
            <para id="para-00015"><link class="os-embed" url="#exercise/prog-py-037"/></para>
          </problem>
        </exercise>
        <exercise id="exer-00009">
          <problem id="prob-00009">
            <para id="para-00016"><link class="os-embed" url="#exercise/prog-py-038"/></para>
          </problem>
        </exercise>
      </note>
    </section>
        <para id="para-00012">Add two comments to the following program: one for the input, and one for the output. Separate the input and output with a blank line. Then compare your comments with the sample solution, and ask yourself the following questions:</para>
        <list id="list-00004">
          <item>Are your comments longer or shorter? Why?</item>
          <item>Is the formatting of your comments correct?</item>
        </list>
        <note class="participation-activity practice-program" id="sect-00012">
          <title>Whose birthday</title>
          <media alt="whos_birthday">
            <iframe width="660" height="371.4" src="https://zytools.zybooks.com/zyBooks2/open-stax-python-code-runner/index.html?parameters=%7B%22files%22%3A%5B%7B%22contents%22%3A%22name%20%3D%20input(%5C%22Whose%20birthday%20is%20today%3F%20%5C%22)%5Cnname%20%3D%20name%20%2B%20%5C%22!%5C%22%5Cnprint()%5Cnprint(%5C%22Happy%20birthday%20to%5C%22%2C%20name)%3B%5Cnprint(%5C%22Everyone%20cheer%20for%5C%22%2C%20name)%3B%5Cn%22%2C%22name%22%3A%22main.py%22%2C%22solution%22%3A%22%23%20get%20the%20person%27s%20name%5Cnname%20%3D%20input(%5C%22Whose%20birthday%20is%20today%3F%20%5C%22)%5Cnname%20%3D%20name%20%2B%20%5C%22!%5C%22%5Cn%5Cn%23%20print%20a%20birthday%20message%5Cnprint()%5Cnprint(%5C%22Happy%20birthday%20to%5C%22%2C%20name)%3B%5Cnprint(%5C%22Everyone%20cheer%20for%5C%22%2C%20name)%3B%5Cn%22%7D%5D%2C%22input%22%3A%22Eduardo%22%2C%22showSolution%22%3Atrue%7D"/>
          </media>
        </note>
        <note class="participation-activity practice-program" id="sect-00013">
          <title>Personalized greeting</title>
          <para id="para-00017">Write a docstring for the following program. The first line of the docstring should explain, in one short sentence, what the program is. The second line of the docstring should be blank. The third line should include a longer explanation of what the program does.</para>
          <media alt="personalized_greeting">
            <iframe width="660" height="371.4" src="https://zytools.zybooks.com/zyBooks2/open-stax-python-code-runner/index.html?parameters=%7B%22files%22%3A%5B%7B%22contents%22%3A%22name%20%3D%20input(%5C%22What%20is%20your%20name%3F%20%5C%22)%5Cnprint(%5C%22Hello%2C%5C%22%2C%20name%20%2B%20%5C%22!%5C%22)%5Cn%22%2C%22name%22%3A%22main.py%22%2C%22solution%22%3A%22%5C%22%5C%22%5C%22Personalized%20greeting.%5Cn%5CnThis%20program%20asks%20the%20user%20for%20their%20name%2C%20says%20hello%2C%20and%20repeats%5Cnback%20their%20name%20followed%20by%20an%20exclamation%20point.%5Cn%5C%22%5C%22%5C%22%5Cn%5Cnname%20%3D%20input(%5C%22What%20is%20your%20name%3F%20%5C%22)%5Cnprint(%5C%22Hello%2C%5C%22%2C%20name%20%2B%20%5C%22!%5C%22)%5Cn%22%7D%5D%2C%22input%22%3A%22Sequoia%22%2C%22showSolution%22%3Atrue%7D"/>
          </media>
        </note>
</content>
</document>