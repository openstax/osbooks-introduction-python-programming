<document xmlns="http://cnx.rice.edu/cnxml" class="introduction">
  <title>Introduction</title>
  <metadata xmlns:md="http://cnx.rice.edu/mdml">
    <md:title>Introduction</md:title>
    <md:content-id>m00010</md:content-id>
    <md:uuid>f968d2a7-1695-4e27-9ee9-8fe36b0c4dca</md:uuid>
  </metadata>
  <content class="introduction">
    <figure class="splash" id="fig-00001">
    <media alt="Grace Murray Hopper at the UNIVAC keyboard">
    <image mime-type="image/jpg" src="../../media/Python_02_00_000.jpg"/>
    </media>
    <caption>credit: modification of work "Grace Hopper at Univac I console", courtesy of the Computer History Museum
    </caption>
    </figure>
    <para id="para-00001">A <span class="purple-code">computer</span> program is a sequence of statements that run one after the other. <span class="red-code">In Python, many</span> statements consist of one or more expressions. An <term id="term-00001">expression</term> represents a single value to be computed. Ex: The expression <code class="python inline-code">3*x - 5</code> evaluates to 7 when <code class="python inline-code">x</code> is 4. Learning to recognize expressions opens the door for programming all kinds of interesting calculations.</para>
    <para id="para-00002">Expressions are <span class="red-code">often</span> a combination of literals, variables, and operators. In the previous example, <code class="python inline-code">3</code> and <code class="python inline-code">5</code> are literals, <code class="python inline-code">x</code> is a variable, and <code class="python inline-code">*</code> and <code class="python inline-code">-</code> are operators. Expressions can be arbitrarily long, consisting of many calculations. Expressions can also be as short as one value. Ex: In the assignment statement <code class="python inline-code">x = 5</code>, the literal <code class="python inline-code">5</code> is an expression.</para>
    <para id="para-00003">Chapter 1 introduced simple expressions like <code class="python inline-code">1 * 2</code> and <code class="python inline-code">"Hi " + "there"</code>. Chapter 2 explores other kinds of expressions for working with numbers and strings. The first section shows a great way to experiment with expressions using a Python shell. Later sections present more details about integers and floating-point numbers, explain how to import and use the <code class="python inline-code">math</code> module, and show how to make long lines of code easier to read.</para>
    </content>
</document>