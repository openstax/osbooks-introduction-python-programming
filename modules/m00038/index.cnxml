<document xmlns="http://cnx.rice.edu/cnxml">
  <title>For loop</title>
  <metadata xmlns:md="http://cnx.rice.edu/mdml">
    <md:title>For loop</md:title>
    <md:content-id>m00038</md:content-id>
    <md:uuid>1509d237-74a8-492e-b622-57153373b516</md:uuid>
  </metadata>
  <content>
    <section id="sect-00001">
    <title>Learning objectives</title>
    <para id="para-00001">By the end of this section you should be able to</para>
    <list id="list-00001">
    <item><span class="red-code">Explain</span> the <code class="python inline-code">for</code> loop construct.</item>
    <item>Use <span class="red-code">a</span> <code class="python inline-code">for</code> loop to implement <span class="red-code">repeating</span> tasks.</item>
    </list>
    </section>
    <section id="sect-00002">
    <title>For loop</title>
    <para id="para-00002">In <span class="blue-code">P</span>ython, a <term id="term-00001">container</term> can be a range of numbers, a string <span class="purple-code">of characters</span>, or a list of values. <span class="blue-code">To access objects within a container, an iterative loop can be designed to retrieve objects one at a time</span>. A <term id="term-00002">for loop</term> iterates over all elements in a container. <span class="blue-code">Ex: Iterating over a class roster and printing students' names.</span></para>
    <note class="guided-slides" id="note-00001">
    <title>For loop example for iterating over a container object</title>
    <media alt="for_loop_iterating_slides">
    <iframe width="660" height="371.4" src="https://www.openstax.org/r/for-loop-iterating"/>
    </media>
    </note>
    <note class="learning-questions" id="note-00002">
    <title>For loop over a string container</title>
    <para id="para-00003">A string variable can be considered as a container of multiple characters, and hence can be iterated on. Given the following code, please answer the questions.</para>
    <code class="python" lang="python">
    str_var = "A string"
    count = 0
    for c in str_var:
    count += 1
    print(count)
    </code>
    <exercise id="exer-00001">
    <problem id="prob-00001">
    <para id="para-00004"><link class="os-embed" url="#exercise/CPL-ch05-m02-p01"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00002">
    <problem id="prob-00002">
    <para id="para-00005"><link class="os-embed" url="#exercise/CPL-ch05-m02-p02"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00003">
    <problem id="prob-00003">
    <para id="para-00006"><link class="os-embed" url="#exercise/CPL-ch05-m02-p03"/></para>
    </problem>
    </exercise>
    </note>
    </section>
    <section id="sect-00003">
    <title><code class="python inline-code">Range()</code> function in for loop</title>
    <para id="para-00007"><span class="red-code">A</span> <code class="python inline-code">for</code> loop can be used for iteration and counting. The <code class="python inline-code">range()</code> function is a common approach for implement<span class="red-code">ing</span> counting in a <code class="python inline-code">for</code> loop. A <term id="term-00003">range()</term> function generates a sequence of integers between the two number<span class="red-code">s</span> give<span class="red-code">n</span> a step size. <span class="blue-code">This integer sequence is inclusive of the start and exclusive of the end of the sequence</span>. The <code class="python inline-code">range()</code> function can take up to three input values. <span class="blue-code">Examples are provided in the table below</span>.</para>
    <table summary=" " id="table-00001">
    <title>Using the range() function.</title>
    <tgroup cols="4">
    <thead>
    <row>
    <entry>Range function</entry>
    <entry>Description</entry>
    <entry>Example</entry>
    <entry>Output</entry>
    </row>
    </thead>
    <tbody>
    <row>
    <entry><code class="python inline-code">range(end)</code></entry>
    <entry><list id="list-00002">
    <item>Generates a sequence beginning at <code class="python inline-code">0</code> until <code class="python inline-code">end</code>.</item>
    <item>Step size: <code class="python inline-code">1</code></item>
    </list></entry>
    <entry><code class="python inline-code">range(4)</code></entry>
    <entry><code class="python inline-code">0, 1, 2, 3</code></entry>
    </row>
    <row>
    <entry morerows="2"><code class="python inline-code">range(start, end)</code></entry>
    <entry morerows="2">
    <list id="list-00003">
    <item>Generates a sequence beginning at <code class="python inline-code">start</code> until <code class="python inline-code">end</code>.</item>
    <item>Step size: <code class="python inline-code">1</code></item>
    </list></entry>
    <entry><code class="python inline-code">range(0, 3)</code></entry>
    <entry><code class="python inline-code">0, 1, 2</code></entry>
    </row>
    <row>
    <entry><code class="python inline-code">range(2, 6)</code></entry>
    <entry><code class="python inline-code">2, 3, 4, 5</code></entry>
    </row>
    <row>
    <entry><code class="python inline-code">range(-13, -9)</code></entry>
    <entry><code class="python inline-code">-13, -12, -11, -10</code></entry>
    </row>
    <row>
    <entry morerows="3"><code class="python inline-code">range(start, end, step)</code></entry>
    <entry morerows="3"><list id="list-00004">
    <item>Generates a sequence beginning at <code class="python inline-code">start</code> until <code class="python inline-code">end</code>.</item>
    <item>Step size: <code class="python inline-code">step</code></item></list></entry>
    <entry><code class="python inline-code">range(0, 4, 1)</code></entry>
    <entry><code class="python inline-code">0, 1, 2, 3</code></entry>
    </row>
    <row>
    <entry><code class="python inline-code">range(1, 7, 2)</code></entry>
    <entry><code class="python inline-code">1, 3, 5</code></entry>
    </row>
    <row>
    <entry><code class="python inline-code">range(3, -2, -1)</code></entry>
    <entry><code class="python inline-code">3, 2, 1, 0, -1</code></entry>
    </row>
    <row>
    <entry><code class="python inline-code">range(10, 0, -4)</code></entry>
    <entry><code class="python inline-code">10, 6, 2</code></entry>
    </row>
    </tbody>
    </tgroup>
    </table>
    <example id="exam-00001">
    <title>Two programs printing all integer multiples of 5 less than 50.</title>
    <table summary=" " id="table-00002">
    <tgroup cols="1">
    <tbody>
    <row>
    <entry><code class="python" lang="python">
    # <span class="blue-code">F</span>or loop condition using range() function to print all multiples of 5 less than 50
    for i in range(0, 50, 5):
    print(i)
    </code></entry>
    <entry><code class="python" lang="python">
    # <span class="blue-code">W</span>hile loop implementation of printing multiples of 5 less than 50
    # <span class="blue-code">I</span>nitialization
    i = 0
    # <span class="blue-code">L</span>imiting the range to be less than 50
    while i &lt; 50:
    # <span class="blue-code">C</span>hecking for multiples of 5
    if i % 5 == 0:
    print(i)
    i += 1
    </code></entry>
    </row>
    </tbody>
    </tgroup>
    </table>
    </example>
    <note class="learning-questions" id="note-00003">
    <title>For loop using a range() function</title>
    <exercise id="exer-00004">
    <problem id="prob-00004">
    <para id="para-00008"><link class="os-embed" url="#exercise/CPL-ch05-m02-p04"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00005">
    <problem id="prob-00005">
    <para id="para-00009"><link class="os-embed" url="#exercise/CPL-ch05-m02-p05"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00006">
    <problem id="prob-00006">
    <para id="para-00010"><link class="os-embed" url="#exercise/CPL-ch05-m02-p06"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00007">
    <problem id="prob-00007">
    <para id="para-00011"><link class="os-embed" url="#exercise/CPL-ch05-m02-p07"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00008">
    <problem id="prob-00008">
    <para id="para-00012"><link class="os-embed" url="#exercise/CPL-ch05-m02-p08"/></para>
    </problem>
    </exercise>
    </note>
    </section>
    <section id="sect-00004">
    <title>Programming Practice</title>
    <note class="practice-program" id="note-00004">
    <title>Counting spaces</title>
    <para id="para-00013">Write a program using a for loop that takes in a string <span class="red-code">as input</span> and counts the number of spaces in the provided string. <span class="red-code">The program must print the number of spaces counted. Ex: If the input is "Hi everyone", the program outputs 1.</span></para>
    <media alt="counting_spaces_program">
    <iframe width="660" height="371.4" src="../../media/interactive//coderunner/ch5/CodeRunner_05_03_03_Counting-spaces.html"/>
    </media>
    </note>
    <note class="practice-program" id="note-00005">
    <title>Odd and even numbers</title>
    <para id="para-00014">Write a program that reads two integer values n1 and n2 with n1 &lt; n2, and performs the following tasks:
    <list list-type="enumerated" id="list-00005">
    <item>prints all even numbers between the two provided numbers (inclusive of both), in ascending order.</item>
    <item>prints all odd numbers between the two provided numbers (exclusive of both), in descending order.</item>
    </list>
    <preformat class="python inline-code">
    Input: 2 8
    </preformat>
    <preformat class="python inline-code">
    prints
    2 4 6 8
    3 5 7
    </preformat>
    </para>
    <media alt="odd_and_even_numbers_program">
    <iframe width="660" height="371.4" src="../../media/interactive//coderunner/ch5/CodeRunner_05_03_04_Odd-and-even-numbers.html"/>
    </media>
    </note>
    </section>
    </content>
</document>