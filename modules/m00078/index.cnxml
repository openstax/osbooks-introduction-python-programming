<document xmlns="http://cnx.rice.edu/cnxml">
  <title>Nested dictionaries and dictionary comprehension</title>
  <metadata xmlns:md="http://cnx.rice.edu/mdml">
    <md:title>Nested dictionaries and dictionary comprehension</md:title>
    <md:content-id>m00078</md:content-id>
    <md:uuid>b26cd66f-5745-4b38-9f30-b3d58d32c9df</md:uuid>
  </metadata>
  <content>
    <section id="sect-00001">
    <title>Learning objectives</title>
    <para id="para-00001">By the end of this section you should be able to</para>
    <list id="list-00001">
    <item>Explain the structure of nested dictionaries.</item>
    <item>Use dictionary comprehension to create a dictionary object.</item>
    </list>
    </section>
    <section id="sect-00002">
    <title>Nested dictionaries</title>
    <para id="para-00002">As described before, Python dictionaries are a type of data structure that allows for storing data in key-value pairs. <term id="term-00001">Nested dictionaries</term> are dictionaries that are stored as values within another dictionary. Ex: An organizational chart with keys being different departments and values being dictionaries of employees in a given department. For storing employee information in a department, a dictionary can be used with keys being employee IDs and values being employee names. The figure below outlines the structure of such nested dictionaries and how nested values can be accessed.</para>
    
    <example id="exam-00001">
      <title>Defining nested dictionaries and accessing elements</title>
      <table summary=" " id="table-00001">
        <tgroup cols="1">
          <thead>
            <row>
            <entry>Defining nested dictionaries</entry>
          </row>
          </thead>
        <tbody>
        <row>
        <entry>
          <code class="python" lang="python">
            company_org_chart = {
              "Marketing": {
                "ID234": "Jane Smith"
              },
              "Sales": {
                "ID123": "Bob Johnson",
                "ID122": "David Lee"
              },
              "Engineering": {
                "ID303": "Radhika Potlapally",
                "ID321": "Maryam Samimi"
              }
            }
            </code>
        </entry>
      </row>
     
      </tbody>
      </tgroup>
      </table>

      <table summary=" " id="table-00002">
        <tgroup cols="1">
          <thead>
            <row>
            <entry>Accessing nested dictionary items</entry>
          </row>
          </thead>
        <tbody>
        <row>
        <entry>
          <code class="python" lang="python">
            print(company_org_chart["Sales"]["ID122"])
            print(company_org_chart["Engineering"]["ID321"])
            </code>
            <code class="python" lang="python">
            David Lee
            Maryam Samimi</code>
        </entry>
      </row>
      </tbody>
      </tgroup>
      </table>
      </example>
    
    <note class="learning-questions" id="note-00001">
    <title>Nested dictionary structure</title>
    <exercise id="exer-00001">
    <problem id="prob-00001">
    <para id="para-00003"><link class="os-embed" url="#exercise/CPL-ch10-m05-p01"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00002">
    <problem id="prob-00002">
    <para id="para-00004"><link class="os-embed" url="#exercise/CPL-ch10-m05-p02"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00003">
    <problem id="prob-00003">
    <para id="para-00005"><link class="os-embed" url="#exercise/CPL-ch10-m05-p03"/></para>
    </problem>
    </exercise>
    </note>
    </section>
    <section id="sect-00003">
    <title>Dictionary comprehension</title>
    <para id="para-00006"><term id="term-00002">Dictionary comprehension</term> is a concise and efficient way to create a dictionary in Python. With dictionary comprehension, elements of an iterable object are transformed into key-value pairs. The syntax of dictionary comprehension is similar to a list comprehension, but instead of using square brackets, curly braces are used to define a dictionary.</para>
    <para id="para-00007">Here is a general syntax for dictionary comprehension:</para>
    <note id="note-00002">
    <title>Syntax for dictionary comprehension.</title>
    <code class="python" lang="python">
    {key_expression: value_expression for element in iterable}
    </code>
    </note>
    <note class="guided-slides" id="note-00003">
    <title>Squares of numbers</title>
    <media alt="squares_of_numbers_slides">
    <iframe width="660" height="371.4" src="https://www.openstax.org/r/squares-of-numbers"/>
    </media>
    </note>
    <note class="learning-questions" id="note-00004">
    <title>Dictionary comprehension</title>
    <exercise id="exer-00004">
    <problem id="prob-00004">
    <para id="para-00008"><link class="os-embed" url="#exercise/CPL-ch10-m05-p04"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00005">
    <problem id="prob-00005">
    <para id="para-00009"><link class="os-embed" url="#exercise/CPL-ch10-m05-p05"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00006">
    <problem id="prob-00006">
    <para id="para-00010"><link class="os-embed" url="#exercise/CPL-ch10-m05-p06"/></para>
    </problem>
    </exercise>
    </note>
    </section>
  
    <note class="practice-program" id="note-00005">
    <title>Product prices</title>
    <para id="para-00011">Suppose you have a dictionary of product prices, where the keys are product names and the values are their respective prices in dollars. Write a Python program that uses dictionary comprehension to create a new dictionary that has the same keys as the original dictionary, but the values are the prices in euros. Assume that the exchange rate is 1 dollar = 0.85 euros.</para>
    <media alt="product_prices_program">
    <iframe width="660" height="371.4" src="../../media/interactive//coderunner/ch10/CodeRunner_10_06_07_Product-prices.html"/>
    </media>
    </note>
    <note class="practice-program" id="note-00006">
    <title>Restructuring the company data</title>
    <para id="para-00012">Suppose you have a dictionary that contains information about employees at a company. Each employee is identified by an ID number, and their information includes their name, department, and salary. You want to create a nested dictionary that groups employees by department so that you can easily see the names and salaries of all employees in each department. Write a Python program that given a dictionary, employees, outputs a nested dictionary, dept_employees, that groups employees by department.</para>
    <code class="python" lang="python">
    Input:
    employees = {
      1001: {"name": "Alice", "department": "Engineering", "salary": 75000},
      1002: {"name": "Bob", "department": "Sales", "salary": 50000},
      1003: {"name": "Charlie", "department": "Engineering", "salary": 80000},
      1004: {"name": "Dave", "department": "Marketing", "salary": 60000},
      1005: {"name": "Eve", "department": "Sales", "salary": 55000}
    }
    </code>
    <code class="python" lang="python">
    Resulting dictionary:<newline/>
    {
    "Engineering": {1001: {"name": "Alice", "salary": 75000}, 1003: {"name": "Charlie", "salary": 80000}},
    "Sales": {1002: {"name": "Bob", "salary": 50000}, 1005: {"name": "Eve", "salary": 55000}},
    "Marketing": {1004: {"name": "Dave", "salary": 60000}}
    }
    </code>
    <media alt="restructuring_the_company_data_program">
    <iframe width="660" height="371.4" src="../../media/interactive//coderunner/ch10/CodeRunner_10_06_08_Restructuring-the-company-data.html"/>
    </media>
    </note>
    </content>
</document>