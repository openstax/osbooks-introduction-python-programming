<document xmlns="http://cnx.rice.edu/cnxml">
  <title>Chapter summary</title>
  <metadata xmlns:md="http://cnx.rice.edu/mdml">
    <md:title>Chapter summary</md:title>
    <md:content-id>m00107</md:content-id>
    <md:uuid>ca2ac923-46f9-4124-8c40-3f75d2ae2b0d</md:uuid>
  </metadata>
  <content>
    <para id="para-00001">Highlights from this chapter include:</para>
    <list id="list-00001">
    <item>Python can read and write data in files using the built-in <code class="python inline-code" lang="python">open()</code> function.</item>
    <item>Due to buffering, changes to a file may not be visible until the file is closed.</item>
    <item>Newline characters need to be removed/added when reading/writing files.</item>
    <item>Comma separated value (CSV) files are commonly used to represent data.</item>
    <item>Exceptions that cause a program to terminate can be handled using <code class="python inline-code" lang="python">try</code> and <code class="python inline-code" lang="python">except</code>.</item>
    <item>Raising an exception is an alternative way to return from a function when an error occurs.</item>
    </list>
<table summary=" " id="table-00001">
<title>Chapter 14 reference</title>
<tgroup cols="2">
<thead>
<row>
<entry>Statement</entry>
<entry>Description</entry>
</row>
</thead>
<tbody>
<row>
<entry><para id="para-00002"><code class="python inline-code" lang="python">file = open("myfile.txt")</code></para></entry>
<entry>Open a file for reading.</entry>
</row>
<row>
<entry><para id="para-00003"><code class="python inline-code" lang="python">file = open("myfile.txt", 'w')</code></para></entry>
<entry>Open a file for writing.</entry>
</row>
<row>
<entry><para id="para-00004"><code class="python inline-code" lang="python">file = open("myfile.txt", 'a')</code></para></entry>
<entry>Open a file for appending.</entry>
</row>
<row>
<entry><para id="para-00005"><code class="python inline-code" lang="python">file.close()</code></para></entry>
<entry>Close a file after making changes.</entry>
</row>
<row>
<entry><para id="para-00006"><code class="python inline-code" lang="python">data = file.read()</code></para></entry>
<entry><para id="para-00007">Read the entire contents of a file. The variable <code class="python inline-code" lang="python">data</code> is a string.</para></entry>
</row>
<row>
<entry><para id="para-00008"><code class="python inline-code" lang="python">data = file.readline()</code></para></entry>
<entry><para id="para-00009">Read the next line of a file. The variable <code class="python inline-code" lang="python">data</code> is a string.</para></entry>
</row>
<row>
<entry><para id="para-00010"><code class="python inline-code" lang="python">data = file.readlines()</code></para></entry>
<entry><para id="para-00011">Read all lines of a file. The variable <code class="python inline-code" lang="python">data</code> is a list of strings.</para></entry>
</row>
<row>
<entry><para id="para-00012"><code class="python inline-code" lang="python">file.write("Have a nice day!\n")</code></para></entry>
<entry><para id="para-00013">Writes a line to a file. In contrast to <code class="python inline-code" lang="python">print()</code>, the <code class="python inline-code" lang="python">write()</code> function does not automatically append a newline.</para></entry>
</row>
<row>
<entry><para id="para-00014"><code class="python inline-code" lang="python">file.write(["Line 1\n", "Line 2\n"])</code></para></entry>
<entry><para id="para-00015">Writes multiple lines to a file. As with <code class="python inline-code" lang="python">write()</code>, a newline is not automatically added at the end of each line.</para></entry>
</row>
<row>
<entry><code class="python" lang="python">
try:
    # Statements
except:
    # Statements
</code></entry>
<entry>Try to run statements that might raise an error. If any error is raised, run other statements.</entry>
</row>
<row>
<entry><code class="python" lang="python">
try:
    # Statements
except ValueError:
    # Statements
</code></entry>
<entry><para id="para-0015">Try to run statements that might raise a <code class="python inline-code" lang="python">ValueError</code>. If a <code class="python inline-code" lang="python">ValueError</code> is raised, run other statements.</para></entry>
</row>
<row>
<entry><code class="python" lang="python">
try:
    # Statements
except ValueError as err:
    # Statements
</code></entry>
<entry><para id="para-00016">Try to run statements that might raise a <code class="python inline-code" lang="python">ValueError</code>. If a <code class="python inline-code" lang="python">ValueError</code> is raised, run other statements. The variable <code class="python inline-code" lang="python">err</code> contains more details about the <code class="python inline-code" lang="python">ValueError</code>.</para></entry>
</row>
<row>
<entry><code class="python" lang="python">
raise ValueError
</code></entry>
<entry><para id="para-0016">Raises a <code class="python inline-code" lang="python">ValueError</code> with no specific error message.</para></entry>
</row>
<row>
<entry><code class="python" lang="python">
raise ValueError("number is prime")
</code></entry>
<entry><para id="para-0017">Raises a <code class="python inline-code" lang="python">ValueError</code> with the message <code class="python inline-code" lang="python">"number is prime"</code>.</para></entry>
</row>
</tbody>
</tgroup>
</table>
</content>
</document>