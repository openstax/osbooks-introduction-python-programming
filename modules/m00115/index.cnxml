<document xmlns="http://cnx.rice.edu/cnxml">
  <title>Summary</title>
  <metadata xmlns:md="http://cnx.rice.edu/mdml">
    <md:title>Summary</md:title>
    <md:content-id>m00115</md:content-id>
    <md:uuid>453f3e5c-843c-4c6e-9bd0-7342785c31f0</md:uuid>
  </metadata>
  <content>
    <para id="para-00001">Highlights from this chapter include:</para>
    <list id="list-00001">
    <item>Data science is a multidisciplinary field that combines collection, processing, and analysis of large volumes of data to extract insights and derives informed decision-making.</item>
    <item>Data science life-cycle is the framework followed by data scientists to complete a data science project.</item>
    <item>Data science life-cycle includes 1) data acquisition, 2) data exploration, 3) data analysis, and 4) reporting.</item>
    <item>Google Colab is a cloud-based Jupyter Notebook environment that allows you to write, run, and share Python code online.</item>
    <item><code class="python inline-code" lang="python">NumPy</code> (Numerical Python) is a Python library that provides support for efficient numerical operations on large, multi-dimensional arrays and serves as a fundamental building block for data analysis in Python.</item>
    <item><code class="python inline-code" lang="python">NumPy</code> implements an <code class="python inline-code" lang="python">ndarray</code> object that allows the creation of multi-dimensional arrays of homogeneous data types and efficient data processing.</item>
    <item><code class="python inline-code" lang="python">NumPy</code> provides functionalities for mathematical operations, array manipulation, and linear algebra operations.</item>
    <item><code class="python inline-code" lang="python">Pandas</code> is an open-source Python library used for data cleaning, processing, and analysis.</item>
    <item><code class="python inline-code" lang="python">Pandas</code> provides <code class="python inline-code" lang="python">Series</code> and <code class="python inline-code" lang="python">DataFrame</code> data structures, data processing functionality, and integration with other libraries.</item>
    <item>Exploratory Data Analysis (EDA) is the task of analyzing the data to gain insights, identify patterns, and understand the underlying structure of the data.</item>
    <item>A feature is an individual variable or attribute that is calculated from the raw data in the dataset.</item>
    <item>Data indexing can be used to select and access specific rows and columns.</item>
    <item>Data slicing refers to selecting a subset of rows and/or columns from a <code class="python inline-code" lang="python">DataFrame</code>.</item>
    <item>Data filtering involves selecting rows or columns based on certain conditions.</item>
    <item>Missing values in a dataset can occur when data is not available or was not recorded properly.</item>
    <item>Data visualization has a crucial role in data science to understand the data.</item>
    <item>Different types of visualizations may include bar plot, line plot, scatter plot, histogram plot, and boxplot.</item>
    <item>Several Python data visualization libraries exist that offer a range of capabilities and features to create different plot types. These libraries include <code class="python inline-code" lang="python">Matplotlib</code>, <code class="python inline-code" lang="python">Seaborn</code>, and <code class="python inline-code" lang="python">Plotly</code>.</item>
    <item>The conventional aliases for importing <code class="python inline-code" lang="python">NumPy</code>, <code class="python inline-code" lang="python">Pandas</code>, and <code class="python inline-code" lang="python">Matplotlib.pyplot</code> are <code class="python inline-code" lang="python">np</code>, <code class="python inline-code" lang="python">pd</code>, and <code class="python inline-code" lang="python">plt</code>, respectively.</item>
    </list>
    <para id="para-00002">At this point, you should be able to write programs to create data structures to store different datasets and explore and visualize datasets.</para>
    <table summary=" " id="table-00001">
    <title>Chapter 15 reference</title>
    <tgroup cols="2">
    <thead>
    <row>
    <entry>Function</entry>
    <entry>Description</entry>
    </row>
    </thead>
    <tbody>
    <row>
    <entry><para id="para-00003"><code class="python inline-code" lang="python">np.array()</code></para></entry>
    <entry><para id="para-00004">Creates an <code class="python inline-code" lang="python">ndarray</code> from a list or tuple.</para></entry>
    </row>
    <row>
    <entry><para id="para-00005"><code class="python inline-code" lang="python">np.zeros()</code></para></entry>
    <entry>Creates an array of zeros.</entry>
    </row>
    <row>
    <entry><para id="para-00006"><code class="python inline-code" lang="python">np.ones()</code></para></entry>
    <entry>Creates an array of ones.</entry>
    </row>
    <row>
    <entry><para id="para-00007"><code class="python inline-code" lang="python">np.random.rand(n, m)</code></para></entry>
    <entry><para id="para-00008">Creates an array of random numbers with <code class="python inline-code" lang="python">n</code> rows and <code class="python inline-code" lang="python">m</code> columns</para></entry>
    </row>
    <row>
    <entry><para id="para-00009"><code class="python inline-code" lang="python">np.genfromtxt('data.csv', delimiter=',')</code></para></entry>
    <entry>Creates an array from a CSV file.</entry>
    </row>
    <row>
    <entry><para id="para-00010"><code class="python inline-code" lang="python">pd.DataFrame()</code></para></entry>
    <entry><para id="para-00011">Creates a <code class="python inline-code" lang="python">DataFrame</code> from a list, dictionary, or an array.</para></entry>
    </row>
    <row>
    <entry><para id="para-00012"><code class="python inline-code" lang="python">pd.read_csv()</code></para></entry>
    <entry><para id="para-00013">Creates a <code class="python inline-code" lang="python">DataFrame</code> from a CSV file.</para></entry>
    </row>
    <row>
    <entry><para id="para-00014"><code class="python inline-code" lang="python">df.head()</code></para></entry>
    <entry><para id="para-00015">Returns the first few rows of a <code class="python inline-code" lang="python">DataFrame</code>.</para></entry>
    </row>
    <row>
    <entry><para id="para-00016"><code class="python inline-code" lang="python">df.tail()</code></para></entry>
    <entry><para id="para-00017">Returns the last few rows of a <code class="python inline-code" lang="python">DataFrame</code>.</para></entry>
    </row>
    <row>
    <entry><para id="para-00018"><code class="python inline-code" lang="python">df.info()</code></para></entry>
    <entry>Provides a summary of the DataFrame, including the column names, data types, and the number of non-null values.</entry>
    </row>
    <row>
    <entry><para id="para-00019"><code class="python inline-code" lang="python">df.describe()</code></para></entry>
    <entry>Generates statistics of the numerical columns like count, mean, standard deviation, minimum, maximum, and quartile.</entry>
    </row>
    <row>
    <entry><para id="para-00020"><code class="python inline-code" lang="python">df.value_counts()</code></para></entry>
    <entry>Counts the occurrences of unique values in a column and presents them in descending order.</entry>
    </row>
    <row>
    <entry><para id="para-00021"><code class="python inline-code" lang="python">df.unique()</code></para></entry>
    <entry>Returns an array of unique values in a column.</entry>
    </row>
    <row>
    <entry><para id="para-00022"><code class="python inline-code" lang="python">loc[]</code></para></entry>
    <entry>Allows for accessing data in a DataFrame using row/column labels.</entry>
    </row>
    <row>
    <entry><para id="para-00023"><code class="python inline-code" lang="python">iloc[]</code></para></entry>
    <entry>Allows for accessing data in a DataFrame using row/column integer-based indices.</entry>
    </row>
    <row>
    <entry><para id="para-00024"><code class="python inline-code" lang="python">df[condition]</code></para></entry>
    <entry><para id="para-00025">Selects only the rows that meet the given <code class="python inline-code" lang="python">condition</code>.</para></entry>
    </row>
    <row>
    <entry><para id="para-00026"><code class="python inline-code" lang="python">df.loc[start_row:end_row, start_column:end_column]</code></para></entry>
    <entry>Slices using label ranges.</entry>
    </row>
    <row>
    <entry><para id="para-00027"><code class="python inline-code" lang="python">df.loc[[label1, label2, ...], :]</code></para></entry>
    <entry><para id="para-00028">Slices rows that are in the list <code class="python inline-code" lang="python">[label1, label2, ...]</code>.</para></entry>
    </row>
    <row>
    <entry><para id="para-00029"><code class="python inline-code" lang="python">df.isnull()</code></para></entry>
    <entry>Returns a Boolean array with Boolean values representing whether each entry has been Null.</entry>
    </row>
    <row>
    <entry><para id="para-00030"><code class="python inline-code" lang="python">fillna()</code></para></entry>
    <entry>Replaces Null values.</entry>
    </row>
    <row>
    <entry><para id="para-00031"><code class="python inline-code" lang="python">dropna()</code></para></entry>
    <entry>Removes all rows containing a Null value.</entry>
    </row>
    <row>
    <entry><para id="para-00032"><code class="python inline-code" lang="python">plt.bar(x, height)</code></para></entry>
    <entry><para id="para-00033">Takes in two inputs <code class="python inline-code" lang="python">x</code> and <code class="python inline-code" lang="python">height</code>, and plots bars for each <code class="python inline-code" lang="python">x</code> value with the height given in the <code class="python inline-code" lang="python">height</code> variable.</para></entry>
    </row>
    <row>
    <entry><para id="para-00034"><code class="python inline-code" lang="python">plt.plot(x, y)</code></para></entry>
    <entry><para id="para-00035">Takes in two inputs <code class="python inline-code" lang="python">x</code> and <code class="python inline-code" lang="python">y</code>, and plots lines connecting pairs of <code class="python inline-code" lang="python">(x, y)</code> value pairs.</para></entry>
    </row>
    <row>
    <entry><para id="para-00036"><code class="python inline-code" lang="python">plt.scatter(x, y)</code></para></entry>
    <entry><para id="para-00037">Takes in two inputs <code class="python inline-code" lang="python">x</code> and <code class="python inline-code" lang="python">y</code>, and plots points representing <code class="python inline-code" lang="python">(x, y)</code> pairs.</para></entry>
    </row>
    <row>
    <entry><para id="para-00038"><code class="python inline-code" lang="python">plt.hist(x)</code></para></entry>
    <entry><para id="para-00039">Takes in one input <code class="python inline-code" lang="python">x</code>, and plots a histogram of values in <code class="python inline-code" lang="python">x</code> to show distribution or trend.</para></entry>
    </row>
    <row>
    <entry><para id="para-00040"><code class="python inline-code" lang="python">plt.boxplot(x)</code></para></entry>
    <entry><para id="para-00041">Takes in one input <code class="python inline-code" lang="python">x</code>, and represents minimum, maximum, first, second, and third quartiles, as well as outliers in <code class="python inline-code" lang="python">x</code>.</para></entry>
    </row>
    </tbody>
    </tgroup>
    </table>
    </content>
</document>