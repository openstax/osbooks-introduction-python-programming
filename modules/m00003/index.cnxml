<document xmlns="http://cnx.rice.edu/cnxml">
  <title>Input/output</title>
  <metadata xmlns:md="http://cnx.rice.edu/mdml">
    <md:title>Input/output</md:title>
    <md:content-id>m00003</md:content-id>
    <md:uuid>0de1cd72-7923-4ddb-8334-1a0a18ea1344</md:uuid>
  </metadata>
  <content>
    <section id="sect-00001">
    <title>Learning objectives</title>
    <para id="para-00001">By the end of this section you should be able to</para>
    <list id="list-00001">
    <item>Display output using the print() function.</item>
    <item>Obtain user input using the input() function.</item>
    </list>
    </section>
    <section id="sect-00002">
    <title>Basic output</title>
    <para id="para-00002">The <term id="term-00001">print()</term> function displays output to the user. <term id="term-00002">Output</term> is the information or result produced by a program. The <code class="python inline-code">sep</code> and <code class="python inline-code">end</code> options can be used to customize the output. <link target-id="table-00001"/> shows examples of <code class="python inline-code">sep</code> and <code class="python inline-code">end</code>.</para>
    <para id="para-00003">Multiple values, separated by commas, can be printed in the same statement. By default, each value is separated by a space character in the output. The <code class="python inline-code">sep</code> option can be used to change this behavior.</para>
    <para id="para-00004">By default, the print() function adds a newline character at the end of the output. A <term id="term-00003">newline</term> character tells the display to move to the next line. The <code class="python inline-code">end</code> option can be used to continue printing on the same line.</para>
    <table summary=" " id="table-00001">
    <title>Example uses of print()</title>
    <tgroup cols="2">
    <thead>
    <row>
    <entry>Code</entry>
    <entry>Output</entry>
    </row>
    </thead>
    <tbody>
    <row>
    <entry><para id="para-00103"><code class="python inline-code">print("Today is Monday.")</code><newline/>
    <code class="python inline-code">print("Monday string beans.")</code></para></entry>
    <entry><para id="para-00104"><code class="python inline-code">Today is Monday.</code><newline/>
    <code class="python inline-code">Monday string beans.</code></para></entry>
    </row>
    <row>
    <entry><para id="para-00105"><code class="python inline-code">print("Today", "is", "Monday")</code><newline/>
    <code class="python inline-code">print("Today", "is", "Monday", sep="...")</code></para></entry>
    <entry><para id="para-00106"><code class="python inline-code">Today is Monday</code><newline/>
    <code class="python inline-code">Today...is...Monday</code></para></entry>
    </row>
    <row>
    <entry><para id="para-00107"><code class="python inline-code">print("Today is Monday, ", end="")</code><newline/>
    <code class="python inline-code">print("Monday string beans.")</code></para></entry>
    <entry><para id="para-00108"><code class="python inline-code">Today is Monday, Monday string beans.</code></para></entry>
    </row>
    <row>
    <entry><para id="para-00109"><code class="python inline-code">print("Today", "is", "Monday", sep="? ", end="!!")</code><newline/>
    <code class="python inline-code">print("Monday string beans.")</code></para></entry>
    <entry><para id="para-00110"><code class="python inline-code">Today? is? Monday!!Monday string beans.</code></para></entry>
    </row>
    </tbody>
    </tgroup>
    </table>
    <note class="guided-slides" id="note-00001">
    <title>Displaying output to the user</title>
    <media alt="displaying_output_slides">
    <iframe width="660" height="371.4" src="https://www.openstax.org/r/displaying-output"/>
    </media>
    </note>
    <note class="learning-questions" id="note-00002">
    <title>The print() function</title>
    <exercise id="exer-00001">
    <problem id="prob-00001">
    <para id="para-00005"><link class="os-embed" url="#exercise/CPL-ch01-m02-p01"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00002">
    <problem id="prob-00002">
    <para id="para-00006"><link class="os-embed" url="#exercise/CPL-ch01-m02-p02"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00003">
    <problem id="prob-00003">
    <para id="para-00007"><link class="os-embed" url="#exercise/CPL-ch01-m02-p03"/></para>
    </problem>
    </exercise>
    </note>
    <note id="note-00003">
    <title>Do spaces really matter?</title>
    <para id="para-00008">Spaces and newline characters are not inherently important. However, learning to be precise is an essential skill for programming. Noticing little details, like how words are separated and how lines end, helps new programmers become better.</para>
    </note>
    </section>
    <section id="sect-00003">
    <title>Basic input</title>
    <para id="para-00009">Computer programs often receive input from the user. <term id="term-00004">Input</term> is what a user enters into a program. An input statement, <code class="python inline-code"><emphasis effect="italics">variable</emphasis> = input(<emphasis effect="italics">"prompt"</emphasis>)</code>, has three parts:</para>
    <list list-type="enumerated" id="list-00002">
    <item>A <term id="term-00005">variable</term> refers to a value stored in memory. In the statement above, <emphasis effect="italics">variable</emphasis> can be replaced with any name the programmer chooses.</item>
    <item>The <term id="term-00006">input()</term> function reads one line of input from the user. The input is stored in the computer's memory and can be accessed later using the variable.</item>
    <item>A <term id="term-00007">prompt</term> is a short message that indicates the program is waiting for input. In the statement above, <emphasis effect="italics">"prompt"</emphasis> can be omitted or replaced with any message.</item>
    </list>
    <note class="guided-slides" id="note-00004">
    <title>Obtaining input from the user</title>
    <media alt="obtaining_input_slides">
    <iframe width="660" height="371.4" src="https://www.openstax.org/r/obtaining-input"/>
    </media>
    </note>
    <note class="learning-questions" id="note-00005">
    <title>The input() function</title>
    <exercise id="exer-00004">
    <problem id="prob-00004">
    <para id="para-00010"><link class="os-embed" url="#exercise/CPL-ch01-m02-p04"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00005">
    <problem id="prob-00005">
    <para id="para-00011"><link class="os-embed" url="#exercise/CPL-ch01-m02-p05"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00006">
    <problem id="prob-00006">
    <para id="para-00012"><link class="os-embed" url="#exercise/CPL-ch01-m02-p06"/></para>
    </problem>
    </exercise>
    </note>
    </section>
 
    <note class="practice-program" id="note-00006">
    <title>Frost poem</title>
    <para id="para-00013">Write a program that uses multiple print() statements to output the following poem by <link url="https://openstax.org/r/100robertfrost">Robert Frost</link>. Each print() statement should correspond to one line of output.</para>
    <para id="para-00014"><emphasis effect="italics">Tip:</emphasis> You don't need to write the entire program all at once. Try writing the first print() statement, and then click the <emphasis effect="italics">Run</emphasis> button. Then write the next print() statement, and click the <emphasis effect="italics">Run</emphasis> button again. Continue writing and testing the code incrementally until you finish the program.</para>
    <code class="python" lang="python">
    I shall be telling this with a sigh
    Somewhere ages and ages hence:
    Two roads diverged in a wood, and I--
    I took the one less traveled by,
    And that has made all the difference.
    </code>
    <media alt="frost_poem_program">
    <iframe width="660" height="371.4" src="../../media/interactive/coderunner/ch1/CodeRunner_01_03_02_Frost-poem.html"/>
    </media>
    </note>
    <note class="practice-program" id="note-00007">
    <title>Name and likes</title>
    <para id="para-00015">Write a program that asks the following two questions (example input in bold):</para>
    <code class="python" lang="python">
    What is your name? Shakira
    What do you like? singing
    </code>
    <para id="para-00016">Output a blank line after reading the input. Then output the following message based on the input:</para>
    <code class="python" lang="python">
    Shakira likes singing
    </code>
    <media alt="name_likes_program">
    <iframe width="660" height="371.4" src="../../media/interactive/coderunner/ch1/CodeRunner_01_03_03_Name-likes.html"/>
    </media>
    </note>
    </content>
    </document>