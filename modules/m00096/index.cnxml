<document xmlns="http://cnx.rice.edu/cnxml">
  <title>Attribute access</title>
  <metadata xmlns:md="http://cnx.rice.edu/mdml">
    <md:title>Attribute access</md:title>
    <md:content-id>m00096</md:content-id>
    <md:uuid>1a772c61-afd3-4c25-b0b7-b7d62f120b8b</md:uuid>
  </metadata>
  <content>
    <section id="sect-00001">
    <title>Learning objectives</title>
    <para id="para-00001">By the end of this section you should be able to</para>
    <list id="list-00001">
    <item>Implement a subclass that accesses inherited attributes from the superclass.</item>
    <item>Write a subclass's <code class="python inline-code" lang="python">__init__()</code> that inherits superclass instance attributes and creates new instance attributes.</item>
    </list>
    </section>
    <section id="sect-00002">
    <title>Creating a simple subclass</title>
    <para id="para-00002">Subclasses have access to the attributes inherited from the superclass. When the subclass's <code class="python inline-code" lang="python">__init__()</code> isn't explicitly defined, the superclass's <code class="python inline-code" lang="python">__init__()</code> method is called. Accessing both types of attributes uses the same syntax.</para>
    <note class="guided-slides" id="note-00001">
    <title>Defining a simple subclass</title>
    <media alt="simple_subclass_slides">
    <iframe width="660" height="371.4" src="https://www.openstax.org/r/simple-subclass"/>
    </media>
    </note>
    <note class="learning-questions" id="note-00002">
    <title>Using simple subclasses</title>
    <exercise id="exer-00001">
    <problem id="prob-00001">
    <para id="para-00003"><link class="os-embed" url="#exercise/CPL-ch13-m02-p01"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00002">
    <problem id="prob-00002">
    <para id="para-00004"><link class="os-embed" url="#exercise/CPL-ch13-m02-p02"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00003">
    <problem id="prob-00003">
    <para id="para-00005"><link class="os-embed" url="#exercise/CPL-ch13-m02-p03"/></para>
    </problem>
    </exercise>
    </note>
    </section>
    <section id="sect-00003">
    <title>Using __init__() to create and inherit instance attributes</title>
    <para id="para-00006">A programmer often wants a subclass to have new instance attributes as well as those inherited from the superclass. Explicitly defining a subclass's <code class="python inline-code" lang="python">__init__()</code> involves defining instance attributes and assigning instance attributes inherited from the superclass.</para>
    <note class="guided-slides" id="note-00003">
    <title>Defining __init__() in a subclass</title>
    <media alt="init_in_a_subclass_slides">
    <iframe width="660" height="371.4" src="https://www.openstax.org/r/init-in-a-subclass"/>
    </media>
    </note>
    <note class="learning-questions" id="note-00004">
    <title>Accessing a subclass's attributes</title>
    <para id="para-00007">Consider the <code class="python inline-code" lang="python">Employee</code> and <code class="python inline-code" lang="python">Developer</code> example code:</para>
    <code class="python" lang="python">
    class Employee:
      count = 0
      def __init__(self):
        Employee.count += 1
        self.e_id = Employee.count
        self.hire_year = 2023

      def emp_display(self):
        print(f"Employee {self.e_id} hired in {self.hire_year}")

    class Developer(Employee):
      def __init__(self):
        Employee.count += 1
        self.e_id = Employee.count
        self.hire_year = 2023
        self.lang_xp = ["Python", "C++", "Java"]

      def dev_display(self):
        print(f"Proficient in {self.lang_xp}")
    
    emp_1 = Employee()
    dev_1 = Developer()
    </code>
    <exercise id="exer-00004">
    <problem id="prob-00004">
    <para id="para-00008"><link class="os-embed" url="#exercise/CPL-ch13-m02-p04"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00005">
    <problem id="prob-00005">
    <para id="para-00009"><link class="os-embed" url="#exercise/CPL-ch13-m02-p05"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00006">
    <problem id="prob-00006">
    <para id="para-00010"><link class="os-embed" url="#exercise/CPL-ch13-m02-p06"/></para>
    </problem>
    </exercise>
    </note>
    </section>
   
    <note class="practice-program" id="note-00005">
    <title>Creating a subclass with an instance attribute</title>
    <para id="para-00011">Given a class <code class="python inline-code" lang="python">Dessert</code>, create a class, <code class="python inline-code" lang="python">Cupcake</code>, inherited from <code class="python inline-code" lang="python">Dessert</code>. <code class="python inline-code" lang="python">Cupcake</code> class methods:</para>
    <list id="list-00002">
    <item><code class="python inline-code" lang="python">__init__(self)</code>: initializes inherited instance attribute ingredients with ["butter", "sugar", "eggs", "flour"], and initializes instance attribute frosting with "buttercream"</item>
    <item><code class="python inline-code" lang="python">display(self)</code>: prints a cupcake's ingredients and frosting</item>
    </list>
    <para id="para-00012">Then call the <code class="python inline-code" lang="python">display()</code> method on a new <code class="python inline-code" lang="python">Cupcake</code> object. The output should match:</para>
    <code class="python" lang="python">
    Made with ["butter", "sugar", "eggs", "flour"] and topped with buttercream frosting
    </code>
    <media alt="creating_a_subclass_with_an_instance_attribute_program">
    <iframe width="660" height="371.4" src="../../media/interactive/coderunner/ch13/CodeRunner_13_03_03_Creating-a-subclass-with-an-instance-attribute.html"/>
    </media>
    </note>
    </content>
</document>