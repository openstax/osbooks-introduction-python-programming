<document xmlns="http://cnx.rice.edu/cnxml">
  <title>Nested loops</title>
  <metadata xmlns:md="http://cnx.rice.edu/mdml">
    <md:title>Nested loops</md:title>
    <md:content-id>m00039</md:content-id>
    <md:uuid>4d842854-98bd-4d88-9dd9-efd1c90406d7</md:uuid>
  </metadata>
  <content>
    <section id="sect-00001">
    <title>Learning objectives</title>
    <para id="para-00001">By the end of this section you should be able to</para>
    <list id="list-00001">
    <item>Implement nested <code class="python inline-code" lang="python">while</code> loops.</item>
    <item>Implement nested <code class="python inline-code" lang="python">for</code> loops.</item>
    </list>
    </section>
    <section id="sect-00002">
    <title>Nested loops</title>
    <para id="para-00002">A <term id="term-00001">nested loop</term> has one or more loops within the body of another loop. The two loops are referred to as <term id="term-00002">outer loop</term> and <term id="term-00003">inner loop</term>. The outer loop controls the number of the inner loop's full execution. More than one inner loop can exist in a nested loop.</para>
    <note class="guided-slides" id="note-00001">
    <title>Nested for loops</title>
    <media alt="nested_while_loops_slides">
    <iframe width="660" height="371.4" src="https://www.openstax.org/r/nested-while-loops"/>
    </media>
    </note>
    <example id="exam-00001">
    <title>Available appointments.</title>
    <para id="para-00003">Consider a doctor's office schedule. Each appointment is 30 minutes long. A program to print available appointments can use a nested <code class="python inline-code" lang="python">for</code> loop where the outer loop iterates over the hours, and the inner loop iterates over the minutes. This example prints time in hours and minutes in the time between 8 am and 10 am. In this example, the outer loop iterates over the time's hour portion between 8 and 9, and the inner loop iterates over the time's minute portion between 0 and 59.</para>
    <code class="python" lang="python">
    hour = 8
    minute = 0
    while hour &lt;= 9:
    &#160;&#160;while minute &lt;= 59:
    &#160;&#160;&#160;&#160;print(hour, ":", minute)
    &#160;&#160;&#160;&#160;minute += 30
    &#160;&#160;hour += 1
    &#160;&#160;minute = 0
    </code>
    <para id="para-00004">The above code's output is:</para>
    <code class="python" lang="python">
    8 : 0
    8 : 30
    9 : 0
    9 : 30
    </code>
    </example>
    <note class="learning-questions" id="note-00002">
    <title>Nested while loop question set</title>
    <exercise id="exer-00001">
    <problem id="prob-00001">
    <para id="para-00005"><link class="os-embed" url="#exercise/CPL-ch05-m03-p01"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00002">
    <problem id="prob-00002">
    <para id="para-00006"><link class="os-embed" url="#exercise/CPL-ch05-m03-p02"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00003">
    <problem id="prob-00003">
    <para id="para-00007"><link class="os-embed" url="#exercise/CPL-ch05-m03-p03"/></para>
    </problem>
    </exercise>
    </note>
    </section>
    <section id="sect-00003">
    <title>Nested for loops</title>
    <para id="para-00008">A nested <code class="python inline-code" lang="python">for</code> loop can be implemented and used in the same way as a nested <code class="python inline-code" lang="python">while</code> loop. A <code class="python inline-code" lang="python">for</code> loop is a preferable option in cases that a loop is used for counting purposes using a <code class="python inline-code" lang="python">range()</code> function or when iterating over a container object, including nested situations. Ex: ​​Iterating over multiple course rosters. The outer loop iterates over different courses, and the inner loop iterates over the names in each course roster.</para>
    <note class="guided-slides" id="note-00003">
    <title>Nested for loops</title>
    <media alt="nested_for_loops_slides">
    <iframe width="660" height="371.4" src="https://www.openstax.org/r/nested-for-loops"/>
    </media>
    </note>
    <note class="learning-questions" id="note-00004">
    <title>Nested loop practices</title>
    <exercise id="exer-00004">
    <problem id="prob-00004">
    <para id="para-00009"><link class="os-embed" url="#exercise/CPL-ch05-m03-p04"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00005">
    <problem id="prob-00005">
    <para id="para-00010"><link class="os-embed" url="#exercise/CPL-ch05-m03-p05"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00006">
    <problem id="prob-00006">
    <para id="para-00011"><link class="os-embed" url="#exercise/CPL-ch05-m03-p06"/></para>
    </problem>
    </exercise>
    </note>
    <note id="note-00005">
    <title>Mixed loops</title>
    <para id="para-00012">The two <code class="python inline-code" lang="python">for</code> and <code class="python inline-code" lang="python">while</code> loop constructs can also be mixed in a nested loop construct. Ex: Printing even numbers less than a given number in a list. The outer loop can be implemented using a <code class="python inline-code" lang="python">for</code> loop iterating over the provided list, and the inner loop iterates over all even numbers less than a given number from the list using a <code class="python inline-code" lang="python">while</code> loop.</para>
    <code class="python" lang="python">
    numbers = [12, 5, 3]
    
    i = 0
    for n in numbers:
    &#160;&#160;while i &lt; n:
    &#160;&#160;&#160;&#160;print (i, end = " ")
    &#160;&#160;&#160;&#160;i += 2
    &#160;&#160;i = 0
    &#160;&#160;print()
    </code>
    </note>
    </section>
 
    <note class="practice-program" id="note-00006">
    <title>Printing a triangle of numbers</title>
    <para id="para-00013">Write a program that prints the following output.</para>
    <code class="python" lang="python" display="block">
     1 2 3 4 5 6 7 8 9
     1 2 3 4 5 6 7 8
     1 2 3 4 5 6 7
     1 2 3 4 5 6
     1 2 3 4 5
     1 2 3 4
     1 2 3
     1 2
     1</code>
    <para id="para-00014"><code class="python inline-code" lang="python">Finish!</code></para>
    <media alt="printing_a_triangle_of_numbers_program">
    <iframe width="660" height="371.4" src="../../media/interactive//coderunner/ch5/CodeRunner_05_04_05_Printing-a-triangle-of-numbers.html"/>
    </media>
    </note>
    <note class="practice-program" id="note-00007">
    <title>Printing two triangles</title>
    <para id="para-00015">Write a program that prints the following output using nested <code class="python inline-code" lang="python">while</code> and <code class="python inline-code" lang="python">for</code> loops.</para>
    <code class="python" lang="python">
    ****
    ***
    **
    *
    ++++
    +++
    ++
    +
    </code>
    <para id="para-00016">+</para>
    <media alt="printing_two_triangles_program">
    <iframe width="660" height="371.4" src="../../media/interactive//coderunner/ch5/CodeRunner_05_04_06_Printing-two-triangles.html"/>
    </media>
    </note>
    </content>
</document>