<document xmlns="http://cnx.rice.edu/cnxml">
  <title>Data visualization</title>
  <metadata xmlns:md="http://cnx.rice.edu/mdml">
    <md:title>Data visualization</md:title>
    <md:content-id>m00113</md:content-id>
    <md:uuid>08eaa76b-00b3-41e7-9668-0df2643be8fb</md:uuid>
  </metadata>
  <content>
    <section id="sect-00001">
    <title>Learning objectives</title>
    <para id="para-00001">By the end of this section you should be able to</para>
    <list id="list-00001">
    <item>Explain why visualization has an important role in data science.</item>
    <item>Choose appropriate visualization for a given task.</item>
    <item>Use Python visualization libraries to create data visualization.</item>
    </list>
    </section>
    <section id="sect-00002">
    <title>Why visualization?</title>
    <para id="para-00002">Data visualization has a crucial role in data science to understand the data. Data visualization can be used in all steps of the data science lifecycle to facilitate data exploration, identify anomalies, understand relationships and trends, and produce reports. Several visualization types are commonly used:</para>
    <table summary=" " id="table-00001">
    <title>Common visualization types</title>
    <tgroup cols="3">
    <thead>
    <row>
    <entry>Visualization Type</entry>
    <entry>Description</entry>
    <entry>Benefits/Common Usage</entry>
    </row>
    </thead>
    <tbody>
    <row>
    <entry>Bar plot</entry>
    <entry>Rectangular bars</entry>
    <entry>Compare values across different categories</entry>
    </row>
    <row>
    <entry>Line plot</entry>
    <entry>A series of data points connected by line segments</entry>
    <entry>Visualize trends and changes</entry>
    </row>
    <row>
    <entry>Scatter plot</entry>
    <entry>Individual data points represent the relationship between two variables</entry>
    <entry>Identify correlations, clusters, and outliers</entry>
    </row>
    <row>
    <entry>Histogram plot</entry>
    <entry>Rectangular bars represent the distribution of a continuous variable by dividing the variable's range into bins and representing the frequency or count of data within each bin</entry>
    <entry>Summarizing the distribution of the data</entry>
    </row>
    <row>
    <entry>Box plot</entry>
    <entry>Rectangular box with whiskers that summarize the distribution of a continuous variable, including the median, quartiles, and outliers</entry>
    <entry>Summarizing the distribution of the data and comparing different variables</entry>
    </row>
    </tbody>
    </tgroup>
    </table>
    <note class="guided-slides" id="note-00001">
    <title>Visualization types</title>
    <media alt="visualization_types_slides">
    <iframe width="660" height="371.4" src="https://www.openstax.org/r/visualization-types"/>
    </media>
    </note>
    <note class="learning-questions" id="note-00002">
    <title>Comparing visualization methods</title>
    <exercise id="exer-00001">
    <problem id="prob-00001">
    <para id="para-00003"><link class="os-embed" url="#exercise/CPL-ch15-m05-p01"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00002">
    <problem id="prob-00002">
    <para id="para-00004"><link class="os-embed" url="#exercise/CPL-ch15-m05-p02"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00003">
    <problem id="prob-00003">
    <para id="para-00005"><link class="os-embed" url="#exercise/CPL-ch15-m05-p03"/></para>
    </problem>
    </exercise>
    </note>
    </section>
    <section id="sect-00003">
    <title>Data visualization tools</title>
    <para id="para-00006">Many Python data visualization libraries exist that offer a range of capabilities and features to create different plot types. Some of the most commonly-used frameworks are <code class="python inline-code">Matplotlib</code>, <code class="python inline-code">Plotly</code>, and <code class="python inline-code">Seaborn</code>. Here, some useful functionalities of <code class="python inline-code">Matplotlib</code> are summarized.</para>
<table summary=" " id="table-00101">
<title>Matplotlib functionalities. Bar plot.</title>
<tgroup cols="2">
<thead>
<row>
<entry>Plot type</entry>
<entry>Method</entry>
</row>
</thead>
<tbody>
<row>
<entry>Bar plot</entry>
<entry><para id="para-00113"><code class="python inline-code">plt.bar(x, height)</code> function takes in two inputs <code class="python inline-code">x</code> and <code class="python inline-code">height</code>, and plots bars for each <code class="python inline-code">x</code> value with the height given in the <code class="python inline-code">height</code> variable.</para></entry>     
</row>
<row>
<entry><emphasis effect="bold">Example</emphasis></entry>
<entry><emphasis effect="bold">Output</emphasis></entry>
</row>
<row>
<entry><code class="python" lang="python">
import matplotlib.pyplot as plt

# Data
categories = ["Course A", "Course B", "Course C"]
values = [25, 40, 30]

# Create the bar chart
fig = plt.bar(categories, values)

# Customize the chart
plt.title("Number of students in each course')
plt.xlabel("Courses")
plt.ylabel("Number of students")

# Display the chart
plt.show()</code></entry>
<entry><media display="inline" alt="Bar chart example">
<image mime-type="image/jpeg" src="../../media/Python_15_05_003.jpg"/>
</media>
</entry>
</row>
</tbody>
</tgroup></table>
    
<table summary=" " id="table-00102">
<title>Matplotlib functionalities. Line plot.</title>
<tgroup cols="2">
<thead>
<row>
<entry>Plot type</entry>
<entry>Method</entry>
</row>
</thead>
<tbody>
<row>
<entry>Line plot</entry>
<entry><para id="para-00114"><code class="python inline-code">plt.plot(x, y)</code> function takes in two inputs <code class="python inline-code">x</code> and <code class="python inline-code">y</code>, and plots lines connecting pairs of <code class="python inline-code">(x, y)</code> value pairs.</para></entry>
</row>
<row>
<entry><emphasis effect="bold">Example</emphasis></entry>
<entry><emphasis effect="bold">Output</emphasis></entry>
</row>
<row>
<entry><code class="python" lang="python">
import matplotlib.pyplot as plt

# Data
month = ["Jan", "Feb", "Mar", "Apr", "May"]
inflation = [6.41, 6.04, 4.99, 4.93, 4.05]

# Create the line chart
plt.plot(month, inflation, marker="o", 
linestyle="-", color="blue")

# Customize the chart
plt.title("Inflation trend in 2023")
plt.xlabel("Month")
plt.ylabel("Inflation")

# Display the chart
plt.show()
</code></entry>
<entry><media display="inline" alt="Line plot example">
<image mime-type="image/jpeg" src="../../media/Python_15_05_002.jpg"/>
</media>
</entry>
</row>
</tbody>
</tgroup></table>

<table summary=" " id="table-00103">
<title>Matplotlib functionalities. Scatter plot.</title>
<tgroup cols="2">
<thead>
<row>
<entry>Plot type</entry>
<entry>Method</entry>
</row>
</thead>
<tbody>
<row>
<entry>Scatter plot</entry>
<entry><para id="para-00115"><code class="python inline-code">plt.scatter(x, y)</code> function takes in two inputs <code class="python inline-code">x</code> and <code class="python inline-code">y</code>, and plots points representing <code class="python inline-code">(x, y)</code> pairs.</para></entry>      
</row>
<row>
<entry><emphasis effect="bold">Example</emphasis></entry>
<entry><emphasis effect="bold">Output</emphasis></entry>
</row>
<row>
<entry><code class="python" lang="python">
import matplotlib.pyplot as plt

# Data
x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
y = [10, 8, 6, 4, 2, 5, 7, 9, 3, 1]

# Create the scatter plot
plt.scatter(x, y, marker="o", color="red")

# Customize the chart
plt.title("Scatter Plot Example")
plt.xlabel("X")
plt.ylabel("Y")

# Display the chart
plt.show()</code></entry>
<entry><media display="inline" alt="Scatter plot example">
<image mime-type="image/jpeg" src="../../media/Python_15_05_005.jpg"/></media>
</entry>
</row>
</tbody>
</tgroup></table> 

<table summary=" " id="table-00104">
<title>Matplotlib functionalities. Histogram plot.</title>
<tgroup cols="2">
<thead>
<row>
<entry>Plot type</entry>
<entry>Method</entry>
</row>
</thead>
<tbody>
<row>
<entry>Histogram plot</entry>
<entry><para id="para-00116"><code class="python inline-code">plt.hist(x)</code> function takes in one input <code class="python inline-code">x</code>, and plots a histogram of values in <code class="python inline-code">x</code> to show distribution or trend.</para></entry>
</row>
<row>
<entry><emphasis effect="bold">Example</emphasis></entry>
<entry><emphasis effect="bold">Output</emphasis></entry>
</row>
<row>
<entry><code class="python" lang="python">
import matplotlib.pyplot as plt
import numpy as np

# Data: random 1000 samples
data = np.random.randn(1000)

# Create the histogram
plt.hist(data, bins=30, edgecolor="black")

# Customize the chart
plt.title("Histogram of random values")
plt.xlabel("Values")
plt.ylabel("Frequency")

# Display the chart
plt.show()</code></entry>
<entry><media display="inline" alt="Histogram plot example">
<image mime-type="image/jpeg" src="../../media/Python_15_05_001.jpg"/>
</media>
</entry>
</row>
</tbody>
</tgroup></table>

<table summary=" " id="table-00105">
<title>Matplotlib functionalities. Box plot.</title>
<tgroup cols="2">
<thead>
<row>
<entry>Plot type</entry>
<entry>Method</entry>
</row>
</thead>
<tbody>
<row>
<entry>Box plot</entry>
<entry><para id="para-00117"><code class="python inline-code">plt.boxplot(x)</code> function takes in one input <code class="python inline-code">x</code>, and represents minimum, maximum, first, second, and third quartiles, as well as outliers in <code class="python inline-code">x</code>.</para></entry>
</row>
<row>
<entry><emphasis effect="bold">Example</emphasis></entry>
<entry><emphasis effect="bold">Output</emphasis></entry>
</row>
<row>
<entry><code class="python" lang="python">
import matplotlib.pyplot as plt
import numpy as np

# Data: random 100 samples
data = [np.random.normal(0, 5, 100)]

# Create the box plot
plt.boxplot(data)

# Customize the chart
plt.title("Box Plot of random values")
plt.xlabel("Data Distribution")
plt.ylabel("Values")

# Display the chart
plt.show()</code></entry>
<entry><media display="inline" alt="Box plot example">
<image mime-type="image/jpeg" src="../../media/Python_15_05_004.jpg"/>
</media>
</entry>
</row>
</tbody>
</tgroup></table>

<!--<table summary=" " id="table-00002">
<title>Matplotlib functionalities.</title>
<tgroup cols="4">
<thead>
<row>
<entry>Plot type</entry>
<entry>Method</entry>
<entry>Example</entry>
<entry>Output</entry>
</row>
</thead>
<tbody>
<row>
<entry>Bar plot</entry>
<entry><para id="para-00013"><code class="python inline-code">plt.bar(x, height)</code> function takes in two inputs <code class="python inline-code">x</code> and <code class="python inline-code">height</code>, and plots bars for each <code class="python inline-code">x</code> value with the height given in the <code class="python inline-code">height</code> variable.</para></entry>
<entry><code class="python" lang="python">
import matplotlib.pyplot as plt

# Data
categories = ["Course A", "Course B", "Course C"]
values = [25, 40, 30]

# Create the bar chart
fig = plt.bar(categories, values)

# Customize the chart
plt.title("Number of students in each course')
plt.xlabel("Courses")
plt.ylabel("Number of students")

# Display the chart
plt.show()</code></entry>
<entry><media display="inline" alt="Bar chart example">
<image mime-type="image/jpeg" src="../../media/Python_15_5_image3.png"/>
</media>
</entry>
</row>
<row>
    <entry>Line plot</entry>
    <entry><para id="para-00014"><code class="python inline-code">plt.plot(x, y)</code> function takes in two inputs <code class="python inline-code">x</code> and <code class="python inline-code">y</code>, and plots lines connecting pairs of <code class="python inline-code">(x, y)</code> value pairs.</para></entry>
    <entry><code class="python" lang="python">
    import matplotlib.pyplot as plt

    # Data
    month = ["Jan", "Feb", "Mar", "Apr", "May"]
    inflation = [6.41, 6.04, 4.99, 4.93, 4.05]

    # Create the line chart
    plt.plot(month, inflation, marker="o", linestyle="-", color="blue")

    # Customize the chart
    plt.title("Inflation trend in 2023")
    plt.xlabel("Month")
    plt.ylabel("Inflation")

    # Display the chart
    plt.show()
    </code></entry>
    <entry><media display="inline" alt="Line plot example">
    <image mime-type="image/jpeg" src="../../media/Python_15_5_image2.png"/>
    </media></entry>
    </row>
    <row>
    <entry>Scatter plot</entry>
    <entry><para id="para-00015"><code class="python inline-code">plt.scatter(x, y)</code> function takes in two inputs <code class="python inline-code">x</code> and <code class="python inline-code">y</code>, and plots points representing <code class="python inline-code">(x, y)</code> pairs.</para></entry>
    <entry><code class="python" lang="python">
    import matplotlib.pyplot as plt

    # Data
    x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    y = [10, 8, 6, 4, 2, 5, 7, 9, 3, 1]

    # Create the scatter plot
    plt.scatter(x, y, marker="o", color="red")

    # Customize the chart
    plt.title("Scatter Plot Example")
    plt.xlabel("X")
    plt.ylabel("Y")

    # Display the chart
    plt.show()</code></entry>
    <entry><media display="inline" alt="Scatter plot example">
    <image mime-type="image/jpeg" src="../../media/Python_15_5_image5.png"/>
    </media></entry>
    </row>
    <row>
    <entry>Histogram plot</entry>
    <entry><para id="para-00016"><code class="python inline-code">plt.hist(x)</code> function takes in one input <code class="python inline-code">x</code>, and plots a histogram of values in <code class="python inline-code">x</code> to show distribution or trend.</para></entry>
    <entry><code class="python" lang="python">
    import matplotlib.pyplot as plt
    import numpy as np

    # Data: random 1000 samples
    data = np.random.randn(1000)

    # Create the histogram
    plt.hist(data, bins=30, edgecolor="black")

    # Customize the chart
    plt.title("Histogram of random values")
    plt.xlabel("Values")
    plt.ylabel("Frequency")

    # Display the chart
    plt.show()</code></entry>
    <entry><media display="inline" alt="Histogram example">
    <image mime-type="image/jpeg" src="../../media/Python_15_5_image1.png"/>
    </media></entry>
    </row>
    <row>
    <entry>Box plot</entry>
    <entry><para id="para-00017"><code class="python inline-code">plt.boxplot(x)</code> function takes in one input <code class="python inline-code">x</code>, and represents minimum, maximum, first, second, and third quartiles, as well as outliers in <code class="python inline-code">x</code>.</para></entry>
    <entry><code class="python" lang="python">
    import matplotlib.pyplot as plt
    import numpy as np

    # Data: random 100 samples
    data = [np.random.normal(0, 5, 100)]

    # Create the box plot
    plt.boxplot(data)

    # Customize the chart
    plt.title("Box Plot of random values")
    plt.xlabel("Data Distribution")
    plt.ylabel("Values")
    
    # Display the chart
    plt.show()</code></entry>
    <entry><media display="inline" alt="boxplot example">
    <image mime-type="image/jpeg" src="../../media/Python_15_5_image4.png"/>
    </media></entry>
    </row>
    </tbody>
    </tgroup>
    </table>-->
    <note class="learning-questions" id="note-00003">
    <title>Matplotlib methods</title>
    <exercise id="exer-00004">
    <problem id="prob-00004">
    <para id="para-00007"><link class="os-embed" url="#exercise/CPL-ch15-m05-p04"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00005">
    <problem id="prob-00005">
    <para id="para-00008"><link class="os-embed" url="#exercise/CPL-ch15-m05-p05"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00006">
    <problem id="prob-00006">
    <para id="para-00009"><link class="os-embed" url="#exercise/CPL-ch15-m05-p06"/></para>
    </problem>
    </exercise>
    </note>
    <note id="note-00004">
    <title>Exploring further</title>
    <para id="para-00010">Please refer to the following user guide for more information about <code class="python inline-code">Matplotlib</code>, <code class="python inline-code">Plotly</code>, and <code class="python inline-code">Seaborn</code> libraries.</para>
    <list id="list-00002">
    <item><link url="https://openstax.org/r/100matplotguide">Matplotlib User Guide</link></item>
    <item><link url="https://openstax.org/r/100plotlyguide">Plotly User Guide</link></item>
    <item><link url="https://openstax.org/r/100seabornguide">Seaborn User Guide</link></item>
    </list>
    </note>
    </section>
    <section id="sect-00004">
    <title>Programming Practice with Google</title>
    <para id="para-00011">Use the Google Colaboratory document below to practice a visualization task on a given dataset.</para>
    <para id="para-00012"><link url="https://openstax.org/r/100visualization">Google Colaboratory document</link></para>
    </section>
    </content>
</document>