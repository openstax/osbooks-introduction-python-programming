<document xmlns="http://cnx.rice.edu/cnxml">
  <title>Chapter summary</title>
  <metadata xmlns:md="http://cnx.rice.edu/mdml">
    <md:title>Chapter summary</md:title>
    <md:content-id>m00079</md:content-id>
    <md:uuid>aaab6485-8094-4962-8a94-6a4cfc7b6dc3</md:uuid>
  </metadata>
  <content>
    <para id="para-00001">Highlights from this chapter include:</para>
    <list id="list-00001">
    <item>A dictionary in Python is a container object including key-value pairs.</item>
    <item>The <code class="python inline-code">dict</code> type implements a dictionary in Python.</item>
    <item>A dictionary cannot have duplicate keys. </item>
    <item>Dictionary is a mutable object but keys in the dictionary must be immutable objects.</item>
    <item>A dictionary can be created using curly braces or the <code class="python inline-code">dict()</code> method.</item>
    <item>Values in the dictionary can be obtained through square bracket notation or the <code class="python inline-code">get()</code> method.</item>
    <item>Dictionary items, keys, and values can be obtained using <code class="python inline-code">items()</code>, <code class="python inline-code">keys()</code>, and <code class="python inline-code">values()</code> methods, respectively.</item>
    <item>Existing items can be modified or new items can be added to a dictionary using square brackets notation or the <code class="python inline-code">update()</code> method.</item>
    <item>Items can be removed from a dictionary using the <code class="python inline-code">del</code> keyword or the <code class="python inline-code">pop()</code> method.</item>
    <item>Conditional statements can be used with a dictionary to check if a dictionary contains specific keys, values, or key-value pairs.</item>
    <item>Looping on a dictionary can be done by iterating over keys, values, or items.</item>
    <item>Nested dictionaries are dictionaries that are stored as values within another dictionary.</item>
    <item>With dictionary comprehension, elements of an iterable object are transformed into key-value pairs.</item>
    </list>
    <para id="para-00002">At this point, you should be able to use dictionaries in your programs. The programming practice below ties together most topics presented in the chapter.</para>
    <table summary=" " id="table-00001">
    <title>Chapter 10 reference</title>
    <tgroup cols="2">
    <thead>
    <row>
    <entry>Concept</entry>
    <entry>Description</entry>
    </row>
    </thead>
    <tbody>
    <row>
    <entry>Dictionary creation using curly braces</entry>
    <entry><code class="python" lang="python">
    my_dict = {key1:value1, key2:value2}
    </code></entry>
    </row>
    <row>
    <entry><para id="para-00101">Dictionary creation using the <code class="python inline-code">dict()</code> method</para></entry>
    <entry><code class="python" lang="python">
    # Using a list
    my_list = [(key1, value1), (key2, value2)]
    my_dict = dict(my_list)<newline/>
    # Using keyword arguments
    my_dict = dict(key1=value1, key2=value2)<newline/>
    # From another dictionary
    old_dict = {key1: value1, key2: value2}
    new_dict = dict(old_dict)<newline/>
    </code></entry>
    </row>
    <row>
    <entry>Accessing dictionary items</entry>
    <entry><code class="python" lang="python">
    my_dict = {key1: value1, key2: value2}<newline/>
    # Accessing item using square bracket notation
    my_dict[key1]<newline/>
    # Accessing item through get() method
    my_dict.get(key1)<newline/>
    </code></entry>
    </row>
    <row>
    <entry>Accessing all dictionary items</entry>
    <entry><code class="python" lang="python">
    my_dict.items()
    </code></entry>
    </row>
    <row>
    <entry>Accessing all dictionary keys</entry>
    <entry><code class="python" lang="python">
    my_dict.keys()
    </code></entry>
    </row>
    <row>
    <entry>Accessing all dictionary values</entry>
    <entry><code class="python" lang="python">
    my_dict.values()
    </code></entry>
    </row>
    <row>
    <entry>Adding a new key-value pair or updating an existing pair</entry>
    <entry><code class="python" lang="python">
    my_dict = {key1: value1, key2: value2}<newline/>
    # Updating an item using square bracket notation
    my_dict[key1] = new_value
    # Adding a new key-value pair using square bracket notation
    my_dict[key3] = value3<newline/>
    # Updating an item using update() method
    my_dict.update({key1: new_value})
    # Adding a new key-value pair using update() method
    my_dict.update({key3: value3})<newline/>
    </code></entry>
    </row>
    <row>
    <entry>Deleting a pair from a dictionary</entry>
    <entry><code class="python" lang="python">
    my_dict = {key1: value1, key2: value2}<newline/>
    # Using del keyword
    del my_dict[key1]<newline/>
    # Using pop() method
    deleted_value = my_dict.pop(key1)<newline/><newline/><newline/>
    </code></entry>
    </row>
    <row>
    <entry>Iterating over a dictionary</entry>
    <entry><code class="python" lang="python">
    for key in dictionary: # Loop expression
      # Statements to execute in the loop<newline/>
    #Statements to execute after the loop<newline/>
    </code></entry>
    </row>
    <row>
    <entry>Nested dictionaries</entry>
    <entry><code class="python" lang="python">
    {
    key_1:{key11:value11, key12:value12},
    key_2:{key21:value21, key22:value22}
    }
    </code></entry>
    </row>
    <row>
    <entry>Dictionary comprehension</entry>
    <entry><code class="python" lang="python">
    {key_expression: value_expression for element in iterable}
    </code></entry>
    </row>
    </tbody>
    </tgroup>
    </table>
    <section id="sect-00001">
    <title>Programming practice</title>
    <note class="practice-program" id="note-00001">
    <title>Even and odd values</title>
    <para id="para-00003">Given a list, create a dictionary with two keys, "even" and "odd". The values associated with each key must be the list of corresponding even and odd values in the given list.</para>
    <code class="python" lang="python">
    Input:
    input_list = [3, 5, 6, 1]
    </code>
    <code class="python" lang="python">
    Prints {"even": [6], "odd":[3, 5, 1]}
    </code>
    <media alt="even_and_odd_values_program">
    <iframe width="660" height="371.4" src="../../media/interactive//coderunner/ch10/CodeRunner_10_07_09_Even-and-odd-values.html"/>
    </media>
    </note>
    </section>
    </content>
</document>