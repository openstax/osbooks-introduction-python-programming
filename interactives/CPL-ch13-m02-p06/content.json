{
  "UI": {
    "showSolutionButton": "Show solution",
    "tryAgainButton": "Retry",
    "checkAnswerButton": "Check",
    "tipsLabel": "Show tip",
    "scoreBarLabel": "You got :num out of :total points",
    "tipAvailable": "Tip available",
    "feedbackAvailable": "Feedback available",
    "readFeedback": "Read feedback",
    "wrongAnswer": "Wrong answer",
    "correctAnswer": "Correct answer",
    "shouldCheck": "Should have been checked",
    "shouldNotCheck": "Should not have been checked",
    "noInput": "Please answer before viewing the solution"
  },
  "behaviour": {
    "enableRetry": true,
    "enableSolutionsButton": true,
    "singlePoint": true,
    "randomAnswers": true,
    "showSolutionsRequiresInput": true,
    "type": "auto",
    "confirmCheckDialog": false,
    "confirmRetryDialog": false,
    "autoCheck": false,
    "passPercentage": 100,
    "showScorePoints": true,
    "enableCheckButton": true
  },
  "overallFeedback": [
    {
      "from": 0,
      "to": 0,
      "feedback": "Wrong"
    },
    {
      "from": 1,
      "to": 99,
      "feedback": "Almost!"
    },
    {
      "from": 100,
      "to": 100,
      "feedback": "Correct!"
    }
  ],
  "question": "Suppose <code class=\"python\" lang=\"python\">dev_display()</code> should be modified to display the developer's ID along with their proficiencies. Ex: <code class=\"python\" lang=\"python\">dev_1.dev_display()</code> would output <code class=\"python\" lang=\"python\">Employee 2 proficient in ['Python', 'C++', 'Java']</code>. Which is the appropriate <code class=\"python\" lang=\"python\">new print()</code> call in <code class=\"python\" lang=\"python\">dev_display()</code>?",
  "isSolutionPublic": true,
  "isFreeResponseSupported": false,
  "answers": [
    {
      "text": "<code class=\"python\" lang=\"python\">print(f\"Employee {self.e_id} proficient in {self.lang_xp}\")</code>",
      "correct": false,
      "tipsAndFeedback": {
        "tip": "",
        "chosenFeedback": "Hardcoding the ID is not appropriate as developers' IDs will be unique.",
        "notChosenFeedback": ""
      }
    },
    {
      "text": "<code class=\"python\" lang=\"python\">print(f\"Employee {self.Employee.e_id} proficient in {self.lang_xp}\")</code>",
      "correct": false,
      "tipsAndFeedback": {
        "tip": "",
        "chosenFeedback": "The superclass name is not needed to access the instance attributes inherited from Employee.",
        "notChosenFeedback": ""
      }
    },
    {
      "text": "<code class=\"python\" lang=\"python\">print(f\"Employee 2 proficient in {self.lang_xp}\")</code>",
      "correct": true,
      "tipsAndFeedback": {
        "tip": "",
        "chosenFeedback": "Instance attributes inherited from <code class=\"python\" lang=\"python\">Employee</code>, the superclass, are accessed the same way as the subclass <code class=\"python\" lang=\"python\">Developer'</code>s instance attributes.",
        "notChosenFeedback": ""
      }
    }
  ],
  "subContentId": "f49a8677-dec4-4c49-8de7-ebc867d4ad55",
  "detailedSolution": "Instance attributes inherited from <code class=\"python\" lang=\"python\">Employee</code>, the superclass, are accessed the same way as the subclass <code class=\"python\" lang=\"python\">Developer'</code>s instance attributes."
}